var suggestions=document.getElementById("suggestions"),search=document.getElementById("search");search!==null&&document.addEventListener("keydown",inputFocus);function inputFocus(e){e.ctrlKey&&e.key==="/"&&(e.preventDefault(),search.focus()),e.key==="Escape"&&(search.blur(),suggestions.classList.add("d-none"))}document.addEventListener("click",function(e){var t=suggestions.contains(e.target);t||suggestions.classList.add("d-none")}),document.addEventListener("keydown",suggestionFocus);function suggestionFocus(e){const s=suggestions.classList.contains("d-none");if(s)return;const t=[...suggestions.querySelectorAll("a")];if(t.length===0)return;const n=t.indexOf(document.activeElement);if(e.key==="ArrowUp"){e.preventDefault();const s=n>0?n-1:0;t[s].focus()}else if(e.key==="ArrowDown"){e.preventDefault();const s=n+1<t.length?n+1:n;t[s].focus()}}(function(){var e=new FlexSearch.Document({tokenize:"forward",cache:100,document:{id:"id",store:["href","title","description"],index:["title","description","content"]}});e.add({id:0,href:"/docs/seclang/directives/",title:"Directives",description:"The following section outlines all of the Coraza directives. ",content:`Include # Description: Include and evaluate a file or file pattern.
Syntax: Include [PATH_TO_CONF_FILES]
Include loads a file or a list of files from the filesystem using golang Glob syntax.
Example:
Include /path/coreruleset/rules/*.conf Quoting Glob documentation:
The syntax of patterns is the same as in Match. The pattern may describe hierarchical names such as /usr/*/bin/ed (assuming the Separator is ‘/’). Glob ignores file system errors such as I/O errors reading directories. The only possible returned error is ErrBadPattern, when pattern is malformed.
SecAction # Description: Unconditionally processes the action list it receives as the first and only parameter.
Syntax: SecAction &quot;action1,action2,action3,...&quot;
This directive is commonly used to set variables and initialize persistent collections using the initcol action. The syntax of the parameter is identical to that of the third parameter of SecRule.
Example:
SecAction &quot;nolog,phase:1,initcol:RESOURCE=%{REQUEST_FILENAME}&quot; SecAuditEngine # Description: Configures the audit logging engine.
Syntax: SecAuditEngine RelevantOnly
Default: Off
The SecAuditEngine directive is used to configure the audit engine, which logs complete transactions.
The possible values for the audit log engine are as follows:
On: log all transactions Off: do not log any transactions RelevantOnly: only the log transactions that have triggered a warning or an error, or have a status code that is considered to be relevant (as determined by the SecAuditLogRelevantStatus directive) Note: If you need to change the audit log engine configuration on a per-transaction basis (e.g., in response to some transaction data), use the ctl action.
The following example demonstrates how SecAuditEngine is used:
SecAuditEngine RelevantOnly SecAuditLog logs/audit/audit.log SecAuditLogParts ABCFHZ SecAuditLogType concurrent SecAuditLogStorageDir logs/audit SecAuditLogRelevantStatus ^(?:5|4(?!04)) SecAuditLog # Description: Defines the path to the main audit log file (serial logging format) or the concurrent logging index file (concurrent logging format).
Syntax: SecAuditLog [ABSOLUTE_PATH_TO_LOG_FILE]
When used in combination with mlogc (only possible with concurrent logging), this directive defines the mlogc location and command line.
Example:
SecAuditLog &quot;/path/to/audit.log&quot; Note: This audit log file is opened on startup when the server typically still runs as root. You should not allow non-root users to have write privileges for this file or for the directory.
SecAuditLogDirMode # Description: Configures the mode (permissions) of any directories created for the concurrent audit logs, using an octal mode value as parameter (as used in chmod).
Syntax: SecAuditLogDirMode octal_mode|&quot;default&quot;
Default: 0600
The default mode for new audit log directories (0600) only grants read/write access to the owner.
Example:
SecAuditLogDirMode 02750 SecAuditLogFileMode # Description: Configures the mode (permissions) of any files created for concurrent audit logs using an octal mode (as used in chmod). See SecAuditLogDirMode for controlling the mode of created audit log directories.
Syntax: SecAuditLogFileMode octal_mode|&quot;default&quot;
Default: 0600
Example:
SecAuditLogFileMode 00640 SecAuditLogFormat # Description: Select the output format of the AuditLogs. The format can be either the native AuditLogs format or JSON.
Syntax: SecAuditLogFormat JSON|Native
Default: Native
SecAuditLogParts # Description: Defines which parts of each transaction are going to be recorded in the audit log. Each part is assigned a single letter; when a letter appears in the list then the equivalent part will be recorded. See below for the list of all parts.
Syntax: SecAuditLogParts [PARTLETTERS]
Default: ABCFHZ
The format of the audit log format is documented in detail in the Audit Log Data Format Documentation.
Example:
SecAuditLogParts ABCFHZ Available audit log parts:
A: Audit log header (mandatory). B: Request headers. C: Request body (present only if the request body exists and Coraza is configured to intercept it. This would require SecRequestBodyAccess to be set to on). D: Reserved for intermediary response headers; not implemented yet. E: Intermediary response body (present only if Coraza is configured to intercept response bodies, and if the audit log engine is configured to record it. Intercepting response bodies requires SecResponseBodyAccess to be enabled). Intermediary response body is the same as the actual response body unless Coraza intercepts the intermediary response body, in which case the actual response body will contain the error message. F: Final response headers. G: Reserved for the actual response body; not implemented yet. H: Audit log trailer. I: This part is a replacement for part C. It will log the same data as C in all cases except when multipart/form-data encoding in used. In this case, it will log a fake application/x-www-form-urlencoded body that contains the information about parameters but not about the files. This is handy if you don’t want to have (often large) files stored in your audit logs. J: This part contains information about the files uploaded using multipart/form-data encoding. K: This part contains a full list of every rule that matched (one per line) in the order they were matched. The rules are fully qualified and will thus show inherited actions and default operators. Z: Final boundary, signifies the end of the entry (mandatory). SecAuditLogRelevantStatus # Description: Configures which response status code is to be considered relevant for the purpose of audit logging.
Syntax: SecAuditLogRelevantStatus [REGEX]
The main purpose of this directive is to allow you to configure audit logging for only the transactions that have the status code that matches the supplied regular expression.
Example:
SecAuditLogRelevantStatus &quot;^(?:5|40[1235])&quot; This example would log all 5xx and 4xx level status codes, except for 404s. Although you could achieve the same effect with a rule in phase 5, SecAuditLogRelevantStatus is sometimes better, because it continues to work even when SecRuleEngine is disabled.
Note: Must have SecAuditEngine set to RelevantOnly. Additionally, the auditlog action is present by default in rules, this will make the engine bypass the SecAuditLogRelevantStatus and send rule matches to the audit log regardless of status. You must specify noauditlog in the rules manually or set it in SecDefaultAction.
SecDebugLog # Description: Path to the Coraza debug log file.
Syntax: SecDebugLog [ABSOLUTE_PATH_TO_DEBUG_LOG]
Logs will be written to this file. Make sure the process user has write access to the directory.
SecDebugLogLevel # Description: Configures the verboseness of the debug log data.
Syntax: SecDebugLogLevel [LOG_LEVEL]
Default: 3
Depending on the implementation, errors ranging from 1 to 2 might be directly logged to the connector error log. For example, level 1 (error) logs will be written to caddy server error logs. The possible values for the debug log level are:
0: No logging (least verbose) 1: Error 2: Warn 3: Info 4-8: Debug 9: Trace (most verbose) Levels outside the 0-9 range will default to level 3 (Info)
SecDefaultAction # Description: Defines the default list of actions, which will be inherited by the rules in the same configuration context.
Syntax: SecDefaultAction &quot;phase:2,log,auditlog,deny,status:403,tag:'SLA 24/7'&quot;
Default: phase:2,log,auditlog,pass
Every rule following a previous SecDefaultAction directive in the same configuration context will inherit its settings unless more specific actions are used.
Rulesets like OWASP Core Ruleset uses this to define operation modes:
You can set the default disruptive action to block for phases 1 and 2 and you can force a phase 3 rule to be disrupted if the thread score is high. You can set the default disruptive action to deny and each risky rule will interrupt the connection. Important: Every SecDefaultAction directive must specify a disruptive action and a processing phase and cannot contain metadata actions.
SecMarker # Description: Adds a fixed rule marker that can be used as a target in a skipAfter action. A SecMarker directive essentially creates a rule that does nothing and whose only purpose is to carry the given ID.
Syntax: SecMarker [ID|TEXT]
The value can be either a number or a text string. The SecMarker directive is available to allow you to choose the best way to implement a skip-over. Here is an example used from the Core Rule Set:
SecMarker BEGIN_HOST_CHECK SecRule &amp;REQUEST_HEADERS:Host &quot;@eq 0&quot; \\ &quot;id:'960008',skipAfter:END_HOST_CHECK,phase:2,rev:'2.1.1',\\ t:none,block,msg:'Request Missing a Host Header',\\ tag:'PROTOCOL_VIOLATION/MISSING_HEADER_HOST',tag:'WASCTC/WASC-21',\\ tag:'OWASP_TOP_10/A7',tag:'PCI/6.5.10',\\ severity:'5',setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},\\ setvar:tx.protocol_violation_score=+%{tx.notice_anomaly_score},\\ setvar:tx.%{rule.id}-PROTOCOL_VIOLATION/MISSING_HEADER-%{matched_var_name}=%{matched_var}&quot; SecRule REQUEST_HEADERS:Host &quot;^$&quot; \\ &quot;id:'960008',phase:2,rev:'2.1.1',t:none,block,msg:'Request Missing a Host Header',\\ tag:'PROTOCOL_VIOLATION/MISSING_HEADER_HOST',tag:'WASCTC/WASC-21',\\ tag:'OWASP_TOP_10/A7',tag:'PCI/6.5.10',severity:'5',\\ setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},\\ setvar:tx.protocol_violation_score=+%{tx.notice_anomaly_score},\\ setvar:tx.%{rule.id}-PROTOCOL_VIOLATION/MISSING_HEADER-%{matched_var_name}=%{matched_var}&quot; SecMarker END_HOST_CHECK SecRequestBodyAccess # Description: Configures whether request bodies will be buffered and processed by Coraza.
Syntax: SecRequestBodyAccess On|Off
Default: Off
This directive is required if you want to inspect the data transported request bodies (e.g., POST parameters). Request buffering is also required in order to make reliable blocking possible. The possible values are:
On: buffer request bodies Off: do not buffer request bodies SecRequestBodyInMemoryLimit # Description: Configures the maximum request body size that Coraza will store in memory.
Syntax: SecRequestBodyInMemoryLimit [LIMIT_IN_BYTES]
Default: 131072 (128 KB)
When a multipart/form-data request is being processed, once the in-memory limit is reached, the request body will start to be streamed into a temporary file on disk.
SecRequestBodyLimit # Description: Configures the maximum request body size Coraza will accept for buffering.
Syntax: SecRequestBodyLimit [LIMIT_IN_BYTES]
Default: 134217728 (131072 KB)
Anything over the limit will be rejected with status code 413 (Request Entity Too Large). There is a hard limit of 1 GB.
SecRequestBodyLimitAction # Description: Controls what happens once a request body limit, configured with SecRequestBodyLimit, is encountered
Syntax: SecRequestBodyLimitAction Reject|ProcessPartial
Default: Reject
By default, Coraza will reject a request body that is longer than specified to avoid OOM issues while buffering the request body prior the inspection.
SecRequestBodyNoFilesLimit # Description: Configures the maximum request body size Coraza will accept for buffering, excluding the size of any files being transported in the request. This directive is useful to reduce susceptibility to DoS attacks when someone is sending request bodies of very large sizes. Web applications that require file uploads must configure SecRequestBodyLimit to a high value, but because large files are streamed to disk, file uploads will not increase memory consumption. However, it’s still possible for someone to take advantage of a large request body limit and send non-upload requests with large body sizes. This directive eliminates that loophole.
Syntax: SecRequestBodyNoFilesLimit 131072
Default: 1048576 (1 MB)
Generally speaking, the default value is not small enough. For most applications, you should be able to reduce it down to 128 KB or lower. Anything over the limit will be rejected with status code 413 (Request Entity Too Large). There is a hard limit of 1 GB.
SecResponseBodyAccess # Description: Configures whether response bodies are to be buffered.
Syntax: SecResponseBodyAccess On|Off
Default: Off
This directive is required if you plan to inspect HTML responses and implement response blocking. Possible values are:
On: buffer response bodies (but only if the response MIME type matches the list configured with SecResponseBodyMimeType). Off: do not buffer response bodies. SecResponseBodyLimit # Description: Configures the maximum response body size that will be accepted for buffering.
Syntax: SecResponseBodyLimit [LIMIT_IN_BYTES]
Default: 524288 (512 KB)
Anything over this limit will be rejected with status code 500 (Internal Server Error). This setting will not affect the responses with MIME types that are not selected for buffering. There is a hard limit of 1 GB.
SecResponseBodyLimitAction # Description: Controls what happens once a response body limit, configured with SecResponseBodyLimit, is encountered.
Syntax: SecResponseBodyLimitAction Reject|ProcessPartial
By default, Coraza will reject a response body that is longer than specified. Some web sites, however, will produce very long responses, making it difficult to come up with a reasonable limit. Such sites would have to raise the limit significantly to function properly, defying the purpose of having the limit in the first place (to control memory consumption). With the ability to choose what happens once a limit is reached, site administrators can choose to inspect only the first part of the response, the part that can fit into the desired limit, and let the rest through. Some could argue that allowing parts of responses to go uninspected is a weakness. This is true in theory, but applies only to cases in which the attacker controls the output (e.g., can make it arbitrary long). In such cases, however, it is not possible to prevent leakage anyway. The attacker could compress, obfuscate, or even encrypt data before it is sent back, and therefore bypass any monitoring device.
SecRule # Description: Creates a rule that will analyze the selected variables using the selected operator.
Syntax: SecRule VARIABLES OPERATOR [ACTIONS]
Every rule must provide one or more variables along with the operator that should be used to inspect them. If no actions are provided, the default list will be used. (There is always a default list, even if one was not explicitly set with SecDefaultAction.) If there are actions specified in a rule, they will be merged with the default list to form the final actions that will be used. (The actions in the rule will overwrite those in the default list.) Refer to SecDefaultAction for more information.
Example:
SecRule ARGS &quot;@rx attack&quot; &quot;phase:1,log,deny,id:1&quot; SecRuleEngine # Description: Configures the rules engine.
Syntax: SecRuleEngine On|Off|DetectionOnly
Default: Off
The possible values are:
On: process rules Off: do not process rules DetectionOnly: process rules but never executes any disruptive actions (block, deny, drop, allow, proxy and redirect) SecRuleRemoveByID # Description: Removes the matching rules from the current configuration context.
Syntax: SecRuleRemoveById ...[ID OR RANGE]
`}),e.add({id:1,href:"/docs/seclang/syntax/",title:"Syntax",description:`The original language for configuring the ModSecurity Apache module was a set of extension directives to the Apache config language. This extension allows you to generate your Security Policy where you take an access control decision based on a set of parameters. Directives can be used to configure the engine itself, but also to send directives to the engine for access control. Directives look like the examples below:
SecDirective1 some options SecDirective2 &quot;some option between brackets \\&quot; and escaped&quot; SecSampleDirective this \\ directive \\ is splitted \\ in lines Rule syntax # Rules are a special directive that must contain variables, operator and actions: SecRule VARIABLES &quot;@OPERATOR OPERATOR_ARGUMENTS&quot; &quot;ACTIONS&quot;.`,content:`The original language for configuring the ModSecurity Apache module was a set of extension directives to the Apache config language. This extension allows you to generate your Security Policy where you take an access control decision based on a set of parameters. Directives can be used to configure the engine itself, but also to send directives to the engine for access control. Directives look like the examples below:
SecDirective1 some options SecDirective2 &quot;some option between brackets \\&quot; and escaped&quot; SecSampleDirective this \\ directive \\ is splitted \\ in lines Rule syntax # Rules are a special directive that must contain variables, operator and actions: SecRule VARIABLES &quot;@OPERATOR OPERATOR_ARGUMENTS&quot; &quot;ACTIONS&quot;.
All rules must have a unique ID action, for example &quot;id:1&quot;. If there is no phase action, the phase will default to 2 (request body). Rules can contain only one disruptive action More default actions can be set with SecDefaultAction SecRule REMOTE_ADDR &quot;127.0.0.1&quot; &quot;id:1, phase:1, pass, log, logdata:'Request from localhost'&quot; Variables # Variables are a structure of KEY:VALUE(S), some variables are mapped objects that contains KEY:[VALUE1,VALUE2,VALUE3], while other are just KEY:VALUE. If you request a variable without any parameter, it will return all of values for each key, if it is a KEY:VALUE variable it will just return a single value. Variable parameters use the syntax VARIABLE:PARAMETER.
Variable key
Variables can be queried for a specific case insesitive key, for example:
SecRule REQUEST_HEADERS:user-agent &quot;@contains firefox&quot; &quot;id:1, pass, log, logdata:'someone used firefox to access'&quot; Variable with regex
(v2 Only): PCRE compatible regex can be used to query a mapped VARIABLE like ARGS, the following example will match all parameters (get and post) where the key begins with param and the value of this argument is someval.
SecRule ARGS:/^param.*$/ &quot;someval&quot; &quot;id:1&quot; 👉 Only RE2 will be supported in v3. Variable count
You can count the number of values available for a collection using the &amp; prefix, for example:
# You want to block requests without host header SecRule &amp;REQUEST_HEADERS:host &quot;@eq 0&quot; &quot;id:1, deny, status:403&quot; Variable exceptions
You can remove specific target keys from the variables list using the ! prefix, for example:
# We want to apply some Sql Injection validations against the REQUEST_HEADERS SecRule REQUEST_HEADERS &quot;@detectSQLi&quot; &quot;id:1,deny,status:403&quot; # There is a false positive for some User-Agents so we want to ignore the # User-Agent header: SecRule REQUEST_HEADERS|!REQUEST_HEADERS:User-Agent &quot;@detectSQLi&quot; &quot;id:2,deny,status:403&quot; ## The second rule will be evaluated for each request header except User-Agent. Multiple Variables
You may evaluate multiple variables by separating them win pipe (|), for example:
SecRule VARIABLE1|VARIABLE2|VARIABLE3:/some-regex/|!VARIABLE3:id &quot;!@rx \\w+&quot; &quot;id:1,pass&quot; XPATH variables # If the body processor is set to process JSON or XML, you may use the special variables XML and JSON, for example:
SecAction &quot;id:1, phase:1,ctl:setRequestBodyProcessor=XML,pass,nolog&quot; # We are denying a book because we don't like it SecRule XML:/bookstore/book[last()] &quot;name of the book&quot; &quot;id:2,phase:2,log,logdata:'We don´t like this book!',deny,status:403&quot; See https://github.com/antchfx/xpath for more information about XPATH support.
Operators # Operators are functions that returns true or false. Only one operator can be used per rule, unless you use chains. The syntax for an operator is: &quot;@OPERATOR ARGUMENTS&quot;, you can negate the result using &quot;!@OPERATOR ARGUMENTS&quot;.
👉 If you don&rsquo;t indicate any operator, the default used operator will be @rx.
Operators must begin with @.
Actions # Actions are key-value instructions for the rule that will be triggered per compilation, interruption or transaction depending on the action type.
Actions values are optional, the key-value syntax is key:value and some actions can be reused as much as you want, like t.
Action types:
Non-disruptive actions - Do something, but that something does not and cannot affect the rule processing flow. Setting a variable, or changing its value is an example of a non-disruptive action. Non-disruptive action can appear in any rule, including each rule belonging to a chain. Flow actions - These actions affect the rule flow (for example skip or skipAfter). Meta-data actions - Meta-data actions are used to provide more information about rules. Examples include id, rev, severity and msg. Data actions - Not really actions, these are mere containers that hold data used by other actions. For example, the status action holds the status that will be used for blocking (if it takes place). Default Actions # SecDefaultAction is used to define a default list of actions per phase. The default phases will be added to each rule and can be overwritten by using the specified action again.
If you define default actions, you are forced to indicate a phase and a disruptive action.
SecDefaultAction &quot;phase:1, deny, status:403&quot; # This rule will deny the request with status 403 because of the default actions SecAction &quot;id:2, phase:1&quot; # This rule will be triggered but it will pas instead of deny SecAction &quot;id:3, phase:1, pass&quot; SecAction # SecActions are used to create rules that will always match, they don´t contain operator nor variables.
Macro Expansion # Macro expansions are special messages that can be transformed into it&rsquo;s evaluated value, the syntax is: %{VARIABLE.KEY}, for example %{REQUEST_HEADERS.host} will return the content of the request header &ldquo;Host&rdquo;.
SecAction &quot;id:1, log, logdata:'Transaction %{unique_id}'&quot; # we assign a variable to tx.argcount SecRule &amp;ARGS &quot;!@eq 0&quot; &quot;id:2, setvar:'tx.argcount=%{MATCHED_VAR}', pass&quot; # we print the args count to the log SecAction &quot;id:3, log, logdata:'%{tx.argcount} arguments found.'&quot; `}),e.add({id:2,href:"/docs/seclang/actions/",title:"Actions",description:"Actions available in Coraza",content:`Actions are defined as part of a SecRule or as parameter for SecAction or SecDefaultAction. A rule can have no or serveral actions which need to be separated by a comma.
Actions can be categorized by how they affect overall processing:
Disruptive actions - Cause Coraza to do something. In many cases something means block transaction, but not in all. For example, the allow action is classified as a disruptive action, but it does the opposite of blocking. There can only be one disruptive action per rule (if there are multiple disruptive actions present, or inherited, only the last one will take effect), or rule chain (in a chain, a disruptive action can only appear in the first rule). 👉 Disruptive actions will NOT be executed if the SecRuleEngine is set to DetectionOnly. If you are creating exception/whitelisting rules that use the allow action, you should also add the ctl:ruleEngine=On action to execute the action. Non-disruptive actions - Do something, but that something does not and cannot affect the rule processing flow. Setting a variable, or changing its value is an example of a non-disruptive action. Non-disruptive action can appear in any rule, including each rule belonging to a chain. Flow actions - These actions affect the rule flow (for example skip or skipAfter). Meta-data actions - used to provide more information about rules. Examples include id, rev, severity and msg. Data actions - Not really actions, these are mere containers that hold data used by other actions. For example, the status action holds the status that will be used for blocking (if it takes place). accuracy # Description: Specifies the relative accuracy level of the rule related to false positives/negatives. The value is a string based on a numeric scale (1-9 where 9 is very strong and 1 has many false positives).
Action Group: Meta-data
Example:
SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* &quot;\\bgetparentfolder\\b&quot; \\ &quot;id:'958016',phase:2,ver:'CRS/2.2.4,accuracy:'9',maturity:'9',capture,\\ t:none,t:htmlEntityDecode,t:compressWhiteSpace,t:lowercase,\\ ctl:auditLogParts=+E,block,msg:'Cross-site Scripting (XSS) Attack',\\ tag:'WEB_ATTACK/XSS',tag:'WASCTC/WASC-8',tag:'WASCTC/WASC-22',tag:'OWASP_TOP_10/A2',\\ tag:'OWASP_AppSensor/IE1',tag:'PCI/6.5.1',logdata:'%{TX.0}',\\ severity:'2',setvar:'tx.msg=%{rule.msg}',\\ setvar:tx.xss_score=+%{tx.critical_anomaly_score},\\ setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},\\ setvar:tx.%{rule.id}-WEB_ATTACK/XSS-%{matched_var_name}=%{tx.0}&quot; allow # Description: Stops rule processing on a successful match and allows the transaction to proceed.
Action Group: Disruptive
Example:
# Allow unrestricted access from 192.168.1.100 SecRule REMOTE_ADDR &quot;^192\\.168\\.1\\.100$&quot; phase:1,id:95,nolog,allow Prior to Coraza 2.5 the allow action would only affect the current phase. An allow in phase 1 would skip processing the remaining rules in phase 1 but the rules from phase 2 would execute. Starting with v2.5.0 allow was enhanced to allow for fine-grained control of what is done. The following rules now apply:
If used on its own, like in the example above, allow will affect the entire transaction, stopping processing of the current phase, but also skipping over all other phases apart from the logging phase. (The logging phase is special; it is designed to always execute.) If used with parameter &ldquo;phase&rdquo;, allow will cause the engine to stop processing the current phase. Other phases will continue as normal. If used with parameter &ldquo;request&rdquo;, allow will cause the engine to stop processing the current phase. The next phase to be processed will be phase RESPONSE_HEADERS. Examples:
# Do not process request but process response. SecAction phase:1,allow:request,id:96 # Do not process transaction (request and response). SecAction phase:1,allow,id:97 If you want to allow a response through, put a rule in phase RESPONSE_HEADERS and simply use allow on its own: # Allow response through. SecAction phase:3,allow,id:98 append # Description: Appends text given as parameter to the end of response body. Content injection must be enabled (using the SecContentInjection directive). No content type checks are made, which means that before using any of the content injection actions, you must check whether the content type of the response is adequate for injection.
Action Group: Non-disruptive
Processing Phases: 3 and 4.
Example:
SecRule RESPONSE_CONTENT_TYPE &quot;^text/html&quot; &quot;nolog,id:99,pass,append:'&lt;hr&gt;Footer'&quot; Warning : Although macro expansion is allowed in the additional content, you are strongly cautioned against inserting user-defined data fields into output. Doing so would create a cross-site scripting vulnerability.
auditlog # Description: Marks the transaction for logging in the audit log.
Action Group: Non-disruptive
Example:
SecRule REMOTE_ADDR &quot;^192\\.168\\.1\\.100$&quot; &quot;auditlog,phase:1,id:100,allow&quot; Note : The auditlog action is now explicit if log is already specified.
block # Description: Performs the disruptive action defined by the previous SecDefaultAction.
Action Group: Disruptive
This action is essentially a placeholder that is intended to be used by rule writers to request a blocking action, but without specifying how the blocking is to be done. The idea is that such decisions are best left to rule users, as well as to allow users, to override blocking if they so desire. In future versions of Coraza, more control and functionality will be added to define &ldquo;how&rdquo; to block.
Examples:
# Specify how blocking is to be done SecDefaultAction &quot;phase:2,deny,id:101,status:403,log,auditlog&quot; # Detect attacks where we want to block SecRule ARGS &quot;@rx attack1&quot; &quot;phase:2,block,id:102&quot; # Detect attacks where we want only to warn SecRule ARGS &quot;@rx attack2&quot; &quot;phase:2,pass,id:103&quot; It is possible to use the SecRuleUpdateActionById directive to override how a rule handles blocking. This is useful in three cases:
If a rule has blocking hard-coded, and you want it to use the policy you determine If a rule was written to block, but you want it to only warn If a rule was written to only warn, but you want it to block The following example demonstrates the first case, in which the hard-coded block is removed in favor of the user-controllable block:
# Specify how blocking is to be done SecDefaultAction &quot;phase:2,deny,status:403,log,auditlog,id:104&quot; # Detect attacks and block SecRule ARGS &quot;@rx attack1&quot; &quot;phase:2,id:1,deny&quot; # Change how rule ID 1 blocks SecRuleUpdateActionById 1 &quot;block&quot; capture # Description: When used together with the regular expression operator @rx, the capture action creates a copy of the regular expression captures and places them into the transaction variable collection.
Action Group: Non-disruptive
Example:
SecRule REQUEST_BODY &quot;^username=(\\w{25,})&quot; phase:2,capture,t:none,chain,id:105 SecRule TX:1 &quot;(?:(?:a(dmin|nonymous)))&quot; Up to 10 captures will be copied on a successful pattern match, each with a name consisting of a digit from 0 to 9. The TX.0 variable always contains the entire area that the regular expression matched. All the other variables contain the captured values, in the order in which the capturing parentheses appear in the regular expression.
**This action is being forced by now, it might be reused in the future)
chain # Description: Chains the current rule with the rule that immediately follows it, creating a rule chain. Chained rules allow for more complex processing logic.
Action Group: Flow
Example:
# Refuse to accept POST requests that do not contain a Content-Length header. # # Note: this rule should be preceded by a rule that verifies only valid # request methods are used. SecRule REQUEST_METHOD &quot;^POST$&quot; &quot;phase:1,chain,t:none,id:105&quot; SecRule &amp;REQUEST_HEADERS:Content-Length &quot;@eq 0&quot; &quot;t:none&quot; Note : Rule chains allow you to simulate logical AND. The disruptive actions specified in the first portion of the chained rule will be triggered only if all of the variable checks return positive hits. If any one aspect of a chained rule comes back negative, then the entire rule chain will fail to match. Also note that disruptive actions, execution phases, metadata actions (id, rev, msg, tag, severity, logdata), skip, and skipAfter actions can be specified only by the chain starter rule. The following directives can be used in rule chains:
SecAction SecRule SecRuleScript Special rules control the usage of actions in chained rules:
Any actions that affect the rule flow (i.e., the disruptive actions, skip and skipAfter) can be used only in the chain starter. They will be executed only if the entire chain matches. Non-disruptive rules can be used in any rule; they will be executed if the rule that contains them matches and not only when the entire chain matches. The metadata actions (e.g., id, rev, msg) can be used only in the chain starter. ctl # Description: Changes Coraza configuration on transient, per-transaction basis. Any changes made using this action will affect only the transaction in which the action is executed. The default configuration, as well as the other transactions running in parallel, will be unaffected.
Action Group: Non-disruptive
Example:
# Parse requests with Content-Type &quot;text/xml&quot; as XML SecRule REQUEST_CONTENT_TYPE ^text/xml &quot;nolog,pass,id:106,ctl:requestBodyProcessor=XML&quot; # white-list the user parameter for rule #981260 when the REQUEST_URI is /index.php SecRule REQUEST_URI &quot;@beginsWith /index.php&quot; &quot;phase:1,t:none,pass,\\ nolog,ctl:ruleRemoveTargetById=981260;ARGS:user&quot; The following configuration options are supported:
auditEngine auditLogParts debugLogLevel forceRequestBodyVariable requestBodyAccess requestBodyLimit requestBodyProcessor responseBodyAccess responseBodyLimit ruleEngine ruleRemoveById - since this action us triggered at run time, it should be specified before the rule in which it is disabling. ruleRemoveByMsg ruleRemoveByTag ruleRemoveTargetById - since this action is used to just remove targets, users don&rsquo;t need to use the char ! before the target list. ruleRemoveTargetByMsg - since this action is used to just remove targets, users don&rsquo;t need to use the char ! before the target list. ruleRemoveTargetByTag - since this action is used to just remove targets, users don&rsquo;t need to use the char ! before the target list. hashEngine (Supported on Coraza: TBI) hashEnforcement (Supported on Coraza: TBI) With the exception of the requestBodyProcessor and forceRequestBodyVariable settings, each configuration option corresponds to one configuration directive and the usage is identical.
The requestBodyProcessor option allows you to configure the request body processor. By default, Coraza will use the URLENCODED and MULTIPART processors to process an application/x-www-form-urlencoded and a multipart/form-data body, respectively. Other two processors are also supported: JSON and XML, but they are never used implicitly. Instead, you must tell Coraza to use it by placing a few rules in the REQUEST_HEADERS processing phase. After the request body is processed as XML, you will be able to use the XML-related features to inspect it.
Request body processors will not interrupt a transaction if an error occurs during parsing. Instead, they will set the variables REQBODY_PROCESSOR_ERROR and REQBODY_PROCESSOR_ERROR_MSG. These variables should be inspected in the REQUEST_BODY phase and an appropriate action taken. The forceRequestBodyVariable option allows you to configure the REQUEST_BODY variable to be set when there is no request body processor configured. This allows for inspection of request bodies of unknown types.
deny # Description: Stops rule processing and intercepts transaction.
Action Group: Disruptive
Example:
SecRule REQUEST_HEADERS:User-Agent &quot;nikto&quot; &quot;log,deny,id:107,msg:'Nikto Scanners Identified'&quot; drop # Description: Initiates an immediate close of the TCP connection by sending a FIN packet.
Action Group: Disruptive
Example: The following example initiates an IP collection for tracking Basic Authentication attempts. If the client goes over the threshold of more than 25 attempts in 2 minutes, it will DROP subsequent connections.
SecAction phase:1,id:109,initcol:ip=%{REMOTE_ADDR},nolog SecRule ARGS:login &quot;!^$&quot; &quot;nolog,phase:1,id:110,setvar:ip.auth_attempt=+1,deprecatevar:ip.auth_attempt=25/120&quot; SecRule IP:AUTH_ATTEMPT &quot;@gt 25&quot; &quot;log,drop,phase:1,id:111,msg:'Possible Brute Force Attack'&quot; Note : This action depends on each implementation, the server is instructed to drop the connection.
This action is extremely useful when responding to both Brute Force and Denial of Service attacks in that, in both cases, you want to minimize both the network bandwidth and the data returned to the client. This action causes error message to appear in the log &ldquo;(9)Bad file descriptor: core_output_filter: writing data to the network&rdquo;
exec # Description: Executes an external script/binary supplied as parameter.
Action Group: Non-disruptive
Example:
# Run external program on rule match SecRule REQUEST_URI &quot;^/cgi-bin/script\\.pl&quot; &quot;phase:2,id:112,t:none,t:lowercase,t:normalizePath,block,\\ exec:/usr/local/apache/bin/test.sh&quot; # Run Lua script on rule match SecRule ARGS:p attack &quot;phase:2,id:113,block,exec:/usr/local/apache/conf/exec.lua&quot; The exec action is executed independently from any disruptive actions specified. External scripts will always be called with no parameters. Some transaction information will be placed in environment variables. All the usual CGI environment variables will be there. You should be aware that forking a threaded process results in all threads being replicated in the new process. Forking can therefore incur larger overhead in a multithreaded deployment. The script you execute must write something (anything) to stdout; if it doesn’t, Coraza will assume that the script failed, and will record the failure.
expirevar # Description: Configures a collection variable to expire after the given time period (in seconds).
Supported on Coraza: TBI
Action Group: Non-disruptive
Example:
SecRule REQUEST_COOKIES:JSESSIONID &quot;!^$&quot; &quot;nolog,phase:1,id:114,pass,setsid:%{REQUEST_COOKIES:JSESSIONID}&quot; SecRule REQUEST_URI &quot;^/cgi-bin/script\\.pl&quot; &quot;phase:2,id:115,t:none,t:lowercase,t:normalizePath,log,allow,\\ setvar:session.suspicious=1,expirevar:session.suspicious=3600,phase:1&quot; You should use the expirevar actions at the same time that you use setvar actions in order to keep the intended expiration time. If they are used on their own (perhaps in a SecAction directive), the expire time will be reset.
id # Description: Assigns a unique ID to the rule or chain in which it appears. This action is mandatory and must be numeric.
Action Group: Meta-data
Example:
SecRule &amp;REQUEST_HEADERS:Host &quot;@eq 0&quot; &quot;log,id:60008,severity:2,msg:'Request Missing a Host Header'&quot; Note : The id action is required for all SecRule/SecAction.
initcol # Description: Initializes a named persistent collection, either by loading data from storage or by creating a new collection in memory.
Action Group: Non-disruptive
Supported on Coraza: TBI
Example: The following example initiates IP address tracking, which is best done in phase 1:
SecAction &quot;phase:1,id:116,nolog,pass,initcol:ip=%{REMOTE_ADDR}&quot; Collections are loaded into memory on-demand, when the initcol action is executed. A collection will be persisted only if a change was made to it in the course of transaction processing.
See the &ldquo;Persistent Storage&rdquo; section for further details.
log # Description: Indicates that a successful match of the rule needs to be logged.
Action Group: Non-disruptive
Example:
SecAction &quot;phase:1,id:117,pass,initcol:ip=%{REMOTE_ADDR},log&quot; This action will log matches to the Apache error log file and the Coraza audit log.
logdata # Description: Logs a data fragment as part of the alert message.
Action Group: Non-disruptive
Example:
SecRule ARGS:p &quot;@rx &lt;script&gt;&quot; &quot;phase:2,id:118,log,pass,logdata:%{MATCHED_VAR}&quot; The logdata information appears in the error and/or audit log files. Macro expansion is performed, so you may use variable names such as %{TX.0} or %{MATCHED_VAR}. The information is properly escaped for use with logging of binary data.
maturity # Description: Specifies the relative maturity level of the rule related to the length of time a rule has been public and the amount of testing it has received. The value is a string based on a numeric scale (1-9 where 9 is extensively tested and 1 is a brand new experimental rule).
Action Group: Meta-data
Example:
SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* &quot;\\bgetparentfolder\\b&quot; \\ &quot;phase:2,ver:'CRS/2.2.4,accuracy:'9',maturity:'9',capture,t:none,t:htmlEntityDecode,t:compressWhiteSpace,t:lowercase,ctl:auditLogParts=+E,block,msg:'Cross-site Scripting (XSS) Attack',id:'958016',tag:'WEB_ATTACK/XSS',tag:'WASCTC/WASC-8',tag:'WASCTC/WASC-22',tag:'OWASP_TOP_10/A2',tag:'OWASP_AppSensor/IE1',tag:'PCI/6.5.1',logdata:'% \\ {TX.0}',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.xss_score=+%{tx.critical_anomaly_score},setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},setvar:tx.%{rule.id}-WEB_ATTACK/XSS-%{matched_var_name}=%{tx.0}&quot; msg # Description: Assigns a custom message to the rule or chain in which it appears. The message will be logged along with every alert.
Action Group: Meta-data
Example:
SecRule &amp;REQUEST_HEADERS:Host &quot;@eq 0&quot; &quot;log,id:60008,severity:2,msg:'Request Missing a Host Header'&quot; Note : The msg information appears in the error and/or audit log files and is not sent back to the client in response headers.
multiMatch # Description: If enabled, Coraza will perform multiple operator invocations for every target, before and after every anti-evasion transformation is performed.
Action Group: Non-disruptive
Example:
SecRule ARGS &quot;attack&quot; &quot;phase1,log,deny,id:119,t:removeNulls,t:lowercase,multiMatch&quot; Normally, variables are inspected only once per rule, and only after all transformation functions have been completed. With multiMatch, variables are checked against the operator before and after every transformation function that changes the input.
noauditlog # Description: Indicates that a successful match of the rule should not be used as criteria to determine whether the transaction should be logged to the audit log.
Action Group: Non-disruptive
Example:
SecRule REQUEST_HEADERS:User-Agent &quot;@streq Test&quot; &quot;allow,noauditlog,id:120&quot; If the SecAuditEngine is set to On, all of the transactions will be logged. If it is set to RelevantOnly, then you can control the logging with the noauditlog action.
The noauditlog action affects only the current rule. If you prevent audit logging in one rule only, a match in another rule will still cause audit logging to take place. If you want to prevent audit logging from taking place, regardless of whether any rule matches, use ctl:auditEngine=Off.
nolog # Description: Prevents rule matches from appearing in both the error and audit logs.
Action Group: Non-disruptive
Example:
SecRule REQUEST_HEADERS:User-Agent &quot;@streq Test&quot; &quot;allow,nolog,id:121&quot; Although nolog implies noauditlog, you can override the former by using nolog,auditlog.
pass # Description: Continues processing with the next rule in spite of a successful match.
Action Group: Disruptive
Example:
SecRule REQUEST_HEADERS:User-Agent &quot;@streq Test&quot; &quot;log,pass,id:122&quot; When using pass with a SecRule with multiple targets, all variables will be inspected and all non-disruptive actions trigger for every match. In the following example, the TX.test variable will be incremented once for every request parameter:
# Set TX.test to zero SecAction &quot;phase:2,nolog,pass,setvar:TX.test=0,id:123&quot; # Increment TX.test for every request parameter SecRule ARGS &quot;test&quot; &quot;phase:2,log,pass,setvar:TX.test=+1,id:124&quot; pause # Description: Pauses transaction processing for the specified number of milliseconds. This feature also supports macro expansion.
Action Group: Disruptive
Example:
SecRule REQUEST_HEADERS:User-Agent &quot;Test&quot; &quot;log,pause:5000,id:125&quot; Warning : This feature can be of limited benefit for slowing down brute force authentication attacks, but use with care. If you are under a denial of service attack, the pause feature may make matters worse, as it will cause an entire Apache worker (process or thread, depending on the deployment mode) to sit idle until the pause is completed.
phase # Description: Places the rule or chain into one of five available processing phases. It can also be used in SecDefaultAction to establish the rule defaults.
Action Group: Meta-data
Example:
# Initialize IP address tracking in phase 1 SecAction phase:1,nolog,pass,id:126,initcol:IP=%{REMOTE_ADDR} There are aliases for some phase numbers:
2 - request 4 - response 5 - logging Example:
SecRule REQUEST_HEADERS:User-Agent &quot;Test&quot; &quot;phase:request,log,deny,id:127&quot; Warning : Keep in mind that if you specify the incorrect phase, the variable used in the rule may not yet be available. This could lead to a false negative situation where your variable and operator may be correct, but it misses malicious data because you specified the wrong phase.
prepend # Description: Prepends the text given as parameter to response body. Content injection must be enabled (using the SecContentInjection directive). No content type checks are made, which means that before using any of the content injection actions, you must check whether the content type of the response is adequate for injection.
Action Group: Non-disruptive
Processing Phases: 3 and 4.
Example:
SecRule RESPONSE_CONTENT_TYPE &quot;^text/html&quot; &quot;phase:3,nolog,pass,id:128,prepend:'Header&lt;br&gt;'&quot; Warning : Although macro expansion is allowed in the injected content, you are strongly cautioned against inserting user defined data fields int output. Doing so would create a cross-site scripting vulnerability.
proxy # Description: Intercepts the current transaction by forwarding the request to another web server using the proxy backend. The forwarding is carried out transparently to the HTTP client (i.e., there’s no external redirection taking place).
Action Group: Disruptive
Example:
SecRule REQUEST_HEADERS:User-Agent &quot;@streq Test&quot; &quot;log,id:129,proxy:http://honeypothost/&quot; SecRule REQUEST_URI &quot;@streq /test.txt&quot; &quot;phase:1,proxy:'http://$ENV{SERVER_NAME}:$ENV{SERVER_PORT}/test.txt',id:500005&quot; For this action to work, the implementation must handle the proxy connection after the interruption notification.
redirect # Description: Intercepts transaction by issuing an external (client-visible) redirection to the given location..
Action Group: Disruptive
Example:
SecRule REQUEST_HEADERS:User-Agent &quot;@streq Test&quot; &quot;phase:1,id:130,log,redirect:http://www.example.com/failed.html&quot; If the status action is present on the same rule, and its value can be used for a redirection (i.e., is one of the following: 301, 302, 303, or 307), the value will be used for the redirection status code. Otherwise, status code 302 will be used.
rev # Description: Specifies rule revision. It is useful in combination with the id action to provide an indication that a rule has been changed.
Action Group: Meta-data
Example:
SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* &quot;(?:(?:[\\;\\|\\\`]\\W*?\\bcc|\\b(wget|curl))\\b|\\/cc(?:[\\'\\&quot;\\|\\;\\\`\\-\\s]|$))&quot; \\ &quot;phase:2,rev:'2.1.3',capture,t:none,t:normalizePath,t:lowercase,ctl:auditLogParts=+E,block,msg:'System Command Injection',id:'950907',tag:'WEB_ATTACK/COMMAND_INJECTION',tag:'WASCTC/WASC-31',tag:'OWASP_TOP_10/A1',tag:'PCI/6.5.2',logdata:'%{TX.0}',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},setvar:tx.command_injection_score=+%{tx.critical_anomaly_score},setvar:tx.%{rule.id}-WEB_ATTACK/COMMAND_INJECTION-%{matched_var_name}=%{tx.0},skipAfter:END_COMMAND_INJECTION1&quot; Note : This action is used in combination with the id action to allow the same rule ID to be used after changes take place but to still provide some indication the rule changed.
sanitiseArg # Description: Prevents sensitive request parameter data from being logged to audit log. Each byte of the named parameter(s) is replaced with an asterisk.
Supported on Coraza: TBI
Action Group: Non-disruptive
Example:
# Never log passwords SecAction &quot;nolog,phase:2,id:131,sanitiseArg:password,sanitiseArg:newPassword,sanitiseArg:oldPassword&quot; Note : The sanitize actions affect only the data as it is logged to audit log. High-level debug logs may contain sensitive data. Apache access log may contain sensitive data placed in the request URI.
sanitiseMatched # Description: Prevents the matched variable (request argument, request header, or response header) from being logged to audit log. Each byte of the named parameter(s) is replaced with an asterisk.
Supported on Coraza: TBI
Action Group: Non-disruptive
Example: This action can be used to sanitise arbitrary transaction elements when they match a condition. For example, the example below will sanitise any argument that contains the word password in the name.
SecRule ARGS_NAMES password nolog,pass,id:132,sanitiseMatched Note : The sanitize actions affect only the data as it is logged to audit log. High-level debug logs may contain sensitive data. Apache access log may contain sensitive data placed in the request URI.
sanitiseMatchedBytes # Description: Prevents the matched string in a variable from being logged to audit log. Each or a range of bytes of the named parameter(s) is replaced with an asterisk.
Supported on Coraza: TBI
Action Group: Non-disruptive
Example: This action can be used to sanitise arbitrary transaction elements when they match a condition. For example, the example below will sanitise the credit card number.
sanitiseMatchedBytes &ndash; This would x out only the bytes that matched. sanitiseMatchedBytes:1/4 &ndash; This would x out the bytes that matched, but keep the first byte and last 4 bytes # Detect credit card numbers in parameters and # prevent them from being logged to audit log SecRule ARGS &quot;@verifyCC \\d{13,16}&quot; &quot;phase:2,id:133,nolog,capture,pass,msg:'Potential credit card number in request',sanitiseMatchedBytes&quot; SecRule RESPONSE_BODY &quot;@verifyCC \\d{13,16}&quot; &quot;phase:4,id:134,t:none,log,capture,block,msg:'Potential credit card number is response body',sanitiseMatchedBytes:0/4&quot; Note : The sanitize actions affect only the data as it is logged to audit log. High-level debug logs may contain sensitive data. Apache access log may contain sensitive data placed in the request URI. You must use capture action with sanitiseMatchedBytes, so the operator must support capture action. ie: @rx, @verifyCC.
sanitiseRequestHeader # Description: Prevents a named request header from being logged to audit log. Each byte of the named request header is replaced with an asterisk.
Supported on Coraza: TBI
Action Group: Non-disruptive
Example: This will sanitise the data in the Authorization header.
SecAction &quot;phase:1,nolog,pass,id:135,sanitiseRequestHeader:Authorization&quot; Note : The sanitize actions affect only the data as it is logged to audit log. High-level debug logs may contain sensitive data. Apache access log may contain sensitive data placed in the request URI.
sanitiseResponseHeader # Description: Prevents a named response header from being logged to audit log. Each byte of the named response header is replaced with an asterisk.
Supported on Coraza: TBI
Action Group: Non-disruptive
Example: This will sanitise the Set-Cookie data sent to the client.
SecAction &quot;phase:3,nolog,pass,id:136,sanitiseResponseHeader:Set-Cookie&quot; Note : The sanitize actions affect only the data as it is logged to audit log. High-level debug logs may contain sensitive data. Apache access log may contain sensitive data placed in the request URI.
severity # Description: Assigns severity to the rule in which it is used.
Action Group: Meta-data
Example:
SecRule REQUEST_METHOD &quot;^PUT$&quot; &quot;id:340002,rev:1,severity:CRITICAL,msg:'Restricted HTTP function'&quot; Severity values in Coraza follows the numeric scale of syslog (where 0 is the most severe). The data below is used by the OWASP Core Rule Set (CRS):
0 - EMERGENCY: is generated from correlation of anomaly scoring data where there is an inbound attack and an outbound leakage. 1 - ALERT: is generated from correlation where there is an inbound attack and an outbound application level error. 2 CRITICAL: Anomaly Score of 5. Is the highest severity level possible without correlation. It is normally generated by the web attack rules (40 level files). 3 - ERROR: Error - Anomaly Score of 4. Is generated mostly from outbound leakage rules (50 level files). 4 - WARNING: Anomaly Score of 3. Is generated by malicious client rules (35 level files). 5 - NOTICE: Anomaly Score of 2. Is generated by the Protocol policy and anomaly files. 6 - INFO 7 - DEBUG It is possible to specify severity levels using either the numerical values or the text values, but you should always specify severity levels using the text values, because it is difficult to remember what a number stands for. The use of the numerical values is deprecated as of version 2.5.0 and may be removed in one of the subsequent major updates.
setuid # Description: Special-purpose action that initializes the USER collection using the username provided as parameter.
Action Group: Non-disruptive
Supported on Coraza: TBI
Example:
SecRule ARGS:username &quot;.*&quot; &quot;phase:2,id:137,t:none,pass,nolog,noauditlog,capture,setvar:session.username=%{TX.0},setuid:%{TX.0}&quot; After initialization takes place, the variable USERID will be available for use in the subsequent rules. This action understands application namespaces (configured using SecWebAppId), and will use one if it is configured.
setrsc # Description: Special-purpose action that initializes the RESOURCE collection using a key provided as parameter.
Action Group: Non-disruptive
Supported on Coraza: TBI
Example:
SecAction &quot;phase:1,pass,id:3,log,setrsc:'abcd1234'&quot; This action understands application namespaces (configured using SecWebAppId), and will use one if it is configured.
setsid # Description: Special-purpose action that initializes the SESSION collection using the session token provided as parameter.
Action Group: Non-disruptive
Supported on Coraza: TBI
Example:
# Initialise session variables using the session cookie value SecRule REQUEST_COOKIES:PHPSESSID !^$ &quot;nolog,pass,id:138,setsid:%{REQUEST_COOKIES.PHPSESSID}&quot; Note: After the initialization takes place, the variable SESSION will be available for use in the subsequent rules. This action understands application namespaces (configured using SecWebAppId), and will use one if it is configured.
Setsid takes an individual variable, not a collection. Variables within an action, such as setsid, use the format [collection].[variable] .
setenv # Description: Creates, removes, and updates environment variables that can be accessed by the implementation.
Action Group: Non-disruptive
Examples:
SecRule RESPONSE_HEADERS:/Set-Cookie2?/ &quot;(?i:(j?sessionid|(php)?sessid|(asp|jserv|jw)?session[-_]?(id)?|cf(id|token)|sid))&quot; &quot;phase:3,t:none,pass,id:139,nolog,setvar:tx.sessionid=%{matched_var}&quot; SecRule TX:SESSIONID &quot;!(?i:\\;? ?httponly;?)&quot; &quot;phase:3,id:140,t:none,setenv:httponly_cookie=%{matched_var},pass,log,auditlog,msg:'AppDefect: Missing HttpOnly Cookie Flag.'&quot; Header set Set-Cookie &quot;%{httponly_cookie}e; HTTPOnly&quot; env=httponly_cookie Note : When used in a chain this action will be execute when an individual rule matches and not the entire chain.
setvar # Description: Creates, removes, or updates a variable. Variable names are case-insensitive.
Action Group: Non-disruptive
Examples: To create a variable and set its value to 1 (usually used for setting flags), use: setvar:TX.score
To create a variable and initialize it at the same time, use: setvar:TX.score=10
To remove a variable, prefix the name with an exclamation mark: setvar:!TX.score
To increase or decrease variable value, use + and - characters in front of a numerical value: setvar:TX.score=+5
Example from OWASP CRS:
SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* &quot;\\bsys\\.user_catalog\\b&quot; \\ &quot;phase:2,rev:'2.1.3',capture,t:none,t:urlDecodeUni,t:htmlEntityDecode,t:lowercase,t:replaceComments,t:compressWhiteSpace,ctl:auditLogParts=+E, \\ block,msg:'Blind SQL Injection Attack',id:'959517',tag:'WEB_ATTACK/SQL_INJECTION',tag:'WASCTC/WASC-19',tag:'OWASP_TOP_10/A1',tag:'OWASP_AppSensor/CIE1', \\ tag:'PCI/6.5.2',logdata:'%{TX.0}',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.sql_injection_score=+%{tx.critical_anomaly_score}, \\ setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},setvar:tx.%{rule.id}-WEB_ATTACK/SQL_INJECTION-%{matched_var_name}=%{tx.0}&quot; Note : When used in a chain this action will be executed when an individual rule matches and not the entire chain.This means that
SecRule REQUEST_FILENAME &quot;@contains /test.php&quot; &quot;chain,id:7,phase:1,t:none,nolog,setvar:tx.auth_attempt=+1&quot; SecRule ARGS_POST:action &quot;@streq login&quot; &quot;t:none&quot; will increment every time that test.php is visited (regardless of the parameters submitted). If the desired goal is to set the variable only if the entire rule matches, it should be included in the last rule of the chain. For instance:
SecRule REQUEST_FILENAME &quot;@streq test.php&quot; &quot;chain,id:7,phase:1,t:none,nolog&quot; SecRule ARGS_POST:action &quot;@streq login&quot; &quot;t:none,setvar:tx.auth_attempt=+1&quot; skip # Description: Skips one or more rules (or chains) on successful match.
Action Group: Flow
Example:
# Require Accept header, but not from access from the localhost SecRule REMOTE_ADDR &quot;^127\\.0\\.0\\.1$&quot; &quot;phase:1,skip:1,id:141&quot; # This rule will be skipped over when REMOTE_ADDR is 127.0.0.1 SecRule &amp;REQUEST_HEADERS:Accept &quot;@eq 0&quot; &quot;phase:1,id:142,deny,msg:'Request Missing an Accept Header'&quot; The skip action works only within the current processing phase and not necessarily in the order in which the rules appear in the configuration file. If you place a phase 2 rule after a phase 1 rule that uses skip, it will not skip over the phase 2 rule. It will skip over the next phase 1 rule that follows it in the phase.
skipAfter # Description: Skips one or more rules (or chains) on a successful match, resuming rule execution with the first rule that follows the rule (or marker created by SecMarker) with the provided ID.
Action Group: Flow
Example: The following rules implement the same logic as the skip example, but using skipAfter:
# Require Accept header, but not from access from the localhost SecRule REMOTE_ADDR &quot;^127\\.0\\.0\\.1$&quot; &quot;phase:1,id:143,skipAfter:IGNORE_LOCALHOST&quot; # This rule will be skipped over when REMOTE_ADDR is 127.0.0.1 SecRule &amp;REQUEST_HEADERS:Accept &quot;@eq 0&quot; &quot;phase:1,deny,id:144,msg:'Request Missing an Accept Header'&quot; SecMarker IGNORE_LOCALHOST Example from the OWASP CRS:
SecMarker BEGIN_HOST_CHECK SecRule &amp;REQUEST_HEADERS:Host &quot;@eq 0&quot; \\ &quot;skipAfter:END_HOST_CHECK,phase:2,rev:'2.1.3',t:none,block,msg:'Request Missing a Host Header',id:'960008',tag:'PROTOCOL_VIOLATION/MISSING_HEADER_HOST',tag:'WASCTC/WASC-21', \\ tag:'OWASP_TOP_10/A7',tag:'PCI/6.5.10',severity:'5',setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score}, \\ setvar:tx.protocol_violation_score=+%{tx.notice_anomaly_score},setvar:tx.%{rule.id}-PROTOCOL_VIOLATION/MISSING_HEADER-%{matched_var_name}=%{matched_var}&quot; SecRule REQUEST_HEADERS:Host &quot;^$&quot; \\ &quot;phase:2,rev:'2.1.3',t:none,block,msg:'Request Missing a Host Header',id:'960008',tag:'PROTOCOL_VIOLATION/MISSING_HEADER_HOST',tag:'WASCTC/WASC-21',tag:'OWASP_TOP_10/A7', \\ tag:'PCI/6.5.10',severity:'5',setvar:'tx.msg=%{rule.msg}',setvar:tx.anomaly_score=+%{tx.notice_anomaly_score},setvar:tx.protocol_violation_score=+%{tx.notice_anomaly_score}, \\ setvar:tx.%{rule.id}-PROTOCOL_VIOLATION/MISSING_HEADER-%{matched_var_name}=%{matched_var}&quot; SecMarker END_HOST_CHECK The skipAfter action works only within the current processing phase and not necessarily the order in which the rules appear in the configuration file. If you place a phase 2 rule after a phase 1 rule that uses skip, it will not skip over the phase 2 rule. It will skip over the next phase 1 rule that follows it in the phase.
status # Description: Specifies the response status code to use with actions deny and redirect.
Action Group: Data
Example:
# Deny with status 403 SecDefaultAction &quot;phase:1,log,deny,id:145,status:403&quot; t # Description: This action is used to specify the transformation pipeline to use to transform the value of each variable used in the rule before matching.
Action Group: Non-disruptive
Example:
SecRule ARGS &quot;(asfunction|javascript|vbscript|data|mocha|livescript):&quot; &quot;id:146,t:none,t:htmlEntityDecode,t:lowercase,t:removeNulls,t:removeWhitespace&quot; Any transformation functions that you specify in a SecRule will be added to the previous ones specified in SecDefaultAction. It is recommended that you always use t:none in your rules, which prevents them depending on the default configuration.
tag # Description: Assigns a tag (category) to a rule or a chain.
Action Group: Meta-data
Example:
SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* &quot;\\bgetparentfolder\\b&quot; \\ &quot;phase:2,rev:'2.1.3',capture,t:none,t:htmlEntityDecode,t:compressWhiteSpace,t:lowercase,ctl:auditLogParts=+E,block,msg:'Cross-site Scripting (XSS) Attack',id:'958016',tag:'WEB_ATTACK/XSS',tag:'WASCTC/WASC-8',tag:'WASCTC/WASC-22',tag:'OWASP_TOP_10/A2',tag:'OWASP_AppSensor/IE1',tag:'PCI/6.5.1',logdata:'% \\ {TX.0}',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.xss_score=+%{tx.critical_anomaly_score},setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},setvar:tx.%{rule.id}-WEB_ATTACK/XSS-%{matched_var_name}=%{tx.0}&quot; The tag information appears along with other rule metadata. The purpose of the tagging mechanism to allow easy automated categorization of events. Multiple tags can be specified on the same rule. Use forward slashes to create a hierarchy of categories (as in the example). Tag support Macro Expansions
ver # Description: Specifies the rule set version.
Action Group: Meta-data
Example:
SecRule REQUEST_FILENAME|ARGS_NAMES|ARGS|XML:/* &quot;\\bgetparentfolder\\b&quot; \\ &quot;phase:2,ver:'CRS/2.2.4,capture,t:none,t:htmlEntityDecode,t:compressWhiteSpace,t:lowercase,ctl:auditLogParts=+E,block,msg:'Cross-site Scripting (XSS) Attack',id:'958016',tag:'WEB_ATTACK/XSS',tag:'WASCTC/WASC-8',tag:'WASCTC/WASC-22',tag:'OWASP_TOP_10/A2',tag:'OWASP_AppSensor/IE1',tag:'PCI/6.5.1',logdata:'% \\ {TX.0}',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.xss_score=+%{tx.critical_anomaly_score},setvar:tx.anomaly_score=+%{tx.critical_anomaly_score},setvar:tx.%{rule.id}-WEB_ATTACK/XSS-%{matched_var_name}=%{tx.0}&quot; `}),e.add({id:3,href:"/docs/seclang/execution-flow/",title:"Execution flow",description:"Learn how to control Coraza rules execution flow using special directives and actions.",content:`Phases # Phases are an abstract concept designed to fit most web servers execution flows and give it more oportunities to stop a request.
Phase 1: Request Headers # This phase will process rules with the following variables:
HTTP connection data, like IPs, ports and protocol version URI and GET arguments Request Headers: cookies, content-type and content-length Phase 2: Request Body # This phase will process rules with the following variables:
POST arguments Multipart arguments and files JSON and XML data Raw Request Body Phase 3: Response Headers # This phase will process rules with the following variables:
Response status code Response headers: content-length and content-type Phase 4: Response Body # This phase will process rules with the following variables:
Raw Response body Phase 5: Logging # This phase will evaluate phase 5 rules, save persistent collections and write the log entry. This phase is not disruptive and it may run after the response was sent to the client.
How rules are sorted # Rules are not sorted by id, they are sorted by phase and compilation order. For example:
SecAction &quot;id:1,phase:3,logdata:'first rule',log&quot; SecAction &quot;id:150,phase:2,logdata:'second rule',log&quot; SecAction &quot;id:300,phase:1,logdata:'third rule',log&quot; This will evaluate the rules based on it&rsquo;s phase, not its id, and show the following logdata:
third rule second rule first rule Secmarkers # SecMarker is a directive that creates an abstract rule, without rules, operators and actions, that will only work as a placeholder to tell the transaction under which SecMarker we are.
SecMarker BEGIN_HOST_CHECK SecRule &amp;REQUEST_HEADERS:Host &quot;@eq 0&quot; &quot;phase:1,id:1,pass&quot; SecRule REQUEST_HEADERS:Host &quot;^$&quot; &quot;phase:1,id:2,pass&quot; SecMarker END_HOST_CHECK This will &ldquo;mark&rdquo; rules 1 and 2 as BEGIN_HOST_CHECK, which will be used by skipAfter action to skip the following rules after the &ldquo;SecMark&rdquo; was reached, for example:
SecAction &quot;id:1, phase:1,skipAfter:END_HOST_CHECK&quot; SecMarker BEGIN_HOST_CHECK SecRule &amp;REQUEST_HEADERS:Host &quot;@eq 0&quot; &quot;phase:1,id:2,pass&quot; SecRule REQUEST_HEADERS:Host &quot;^$&quot; &quot;phase:1,id:3,pass&quot; SecMarker END_HOST_CHECK SecAction &quot;id:4,phase:1,pass&quot; In the example above, rules 2 and 3 will be skipped because they are marked as BEGIN_HOST_CHECK and not END_HOST_CHECK as expected by skipAfter.
Other flow controllers # Skip action can also be used to skip the N following rules, for example:
SecAction &quot;id:1,phase:1, skip:1&quot; # The following rule won't be evaluated SecAction &quot;id:2&quot; # This rule will be evaluated SecAction &quot;id:3&quot; `}),e.add({id:4,href:"/docs/tutorials/introduction/",title:"Introduction",description:"Introduction to Coraza Web Application Firewall. Start protecting your web applications in a few steps.",content:` &nbsp; Coraza - Web Application Firewall Coraza is an open source, enterprise-grade, high performance Web Application Firewall (WAF) ready to protect your beloved applications. It written in Go, supports ModSecurity SecLang rulesets and is 100% compatible with the OWASP Core Rule Set.
Website: https://coraza.io Forum: Github Discussions OWASP Slack Community (#coraza): https://owasp.org/slack/invite Rule testing: Coraza Playground Planning: Github Projects Key Features:
⇲ Drop-in - Coraza is a drop-in alternative to replace Trustwave ModSecurity Engine (planned to be deprecated on July 1, 2024) and supports industry-standard SecLang rule sets.
🔥 Security - Coraza runs the OWASP Core Rule Set (CRS) to protect your web applications from a wide range of attacks, including the OWASP Top Ten, with a minimum of false alerts. CRS protects from many common attack categories including SQL Injection (SQLi), Cross Site Scripting (XSS), PHP &amp; Java Code Injection, HTTPoxy, Shellshock, Scripting/Scanner/Bot Detection &amp; Metadata &amp; Error Leakages.
🔌 Extensible - Coraza is a library at its core, with many integrations to deploy on-premise Web Application Firewall instances. Audit Loggers, persistence engines, operators, actions, create your own functionalities to extend Coraza as much as you want.
🚀 Performance - From huge websites to small blogs, Coraza can handle the load with minimal performance impact. Check our Benchmarks
﹡ Simplicity - Anyone can understand and modify the Coraza source code. It is easy to extend Coraza with new functionality.
💬 Community - Coraza is a community project, contributions are accepted and all ideas will be considered. Find contributor guidance in the CONTRIBUTION document.
Integrations # The Coraza Project maintains implementations and plugins for the following servers:
Caddy Reverse Proxy and Webserver Plugin - stable, needs a maintainer Proxy WASM extension for proxies with proxy-wasm support (e.g. Envoy) - stable, still under development HAProxy SPOE Plugin - preview Traefik Proxy Plugin - preview, needs maintainer Gin Web Framework Middleware - preview, needs maintainer Apache HTTP Server - experimental Nginx - experimental Coraza C Library - experimental Plugins # Coraza GeoIP (preview) Prerequisites # Golang compiler v1.18+ Linux distribution (Debian or Centos recommended) or Mac. Windows is not supported yet. Coraza Core Usage # Coraza can be used as a library for your Go program to implement a security middleware or integrate it with existing applications &amp; webservers.
package main import ( &quot;fmt&quot; &quot;github.com/corazawaf/coraza/v3&quot; ) func main() { // First we initialize our waf and our seclang parser waf, err := coraza.NewWAF(coraza.NewWAFConfig(). WithDirectives(\`SecRule REMOTE_ADDR &quot;@rx .*&quot; &quot;id:1,phase:1,deny,status:403&quot;\`)) // Now we parse our rules if err != nil { fmt.Println(err) } // Then we create a transaction and assign some variables tx := waf.NewTransaction() defer func() { tx.ProcessLogging() tx.Close() }() tx.ProcessConnection(&quot;127.0.0.1&quot;, 8080, &quot;127.0.0.1&quot;, 12345) // Finally we process the request headers phase, which may return an interruption if it := tx.ProcessRequestHeaders(); it != nil { fmt.Printf(&quot;Transaction was interrupted with status %d\\n&quot;, it.Status) } } Examples/http-server provides an example to practice with Coraza.
Build tags # Go build tags can tweak certain functionality at compile-time. These are for advanced use cases only and do not have compatibility guarantees across minor versions - use with care.
coraza.disabled_operators.* - excludes the specified operator from compilation. Particularly useful if overriding the operator with operators.Register to reduce binary size / startup overhead. coraza.rule.multiphase_valuation - enables evaluation of rule variables in the phases that they are ready, not only the phase the rule is defined for. Tools # Go FTW: Rule testing engine Coraza Playground: Sandbox rule testing web interface OWASP Core Ruleset: Awesome rule set, compatible with Coraza Development # Coraza only requires Go for development. You can run mage.go to issue development commands.
See the list of commands
go run mage.go -l For example, to format your code before submission, run
go run mage.go format Contribute # Contributions are welcome! Please refer to CONTRIBUTING.md for guidance.
Thanks # Modsecurity team for creating ModSecurity OWASP Coreruleset team for the CRS and their help Companies using Coraza # Babiel (supporter) Author on Twitter # @jptosso Donations # For donations, see Donations site
Thanks to all the people who have contributed # We could not have done this without you!
Made with contrib.rocks.
`}),e.add({id:5,href:"/docs/seclang/operators/",title:"Operators",description:"This section documents the operators currently available in Coraza.",content:`beginsWith # Description: Returns true if the parameter string is found at the beginning of the input. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect request line that does not begin with &quot;GET&quot; SecRule REQUEST_LINE &quot;!@beginsWith GET&quot; &quot;id:149&quot; contains # Description: Returns true if the parameter string is found anywhere in the input. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect &quot;.php&quot; anywhere in the request line SecRule REQUEST_LINE &quot;@contains .php&quot; &quot;id:150&quot; containsWord # Description: Returns true if the parameter string (with word boundaries) is found anywhere in the input. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect &quot;select&quot; anywhere in ARGS SecRule ARGS &quot;@containsWord select&quot; &quot;id:151&quot; Would match on - -1 union select BENCHMARK(2142500,MD5(CHAR(115,113,108,109,97,112))) FROM wp_users WHERE ID=1 and (ascii(substr(user_login,1,1))&amp;0x01=0) from wp_users where ID=1&ndash;
But not on - Your site has a wide selection of computers.
endsWith # Description: Returns true if the parameter string is found at the end of the input. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect request line that does not end with &quot;HTTP/1.1&quot; SecRule REQUEST_LINE &quot;!@endsWith HTTP/1.1&quot; &quot;id:152&quot; fuzzyHash # Description: The fuzzyHash operator uses the ssdeep, which is a program for computing context triggered piecewise hashes (CTPH). Also called fuzzy hashes, CTPH can match inputs that have homologies. Such inputs have sequences of identical bytes in the same order, although bytes in between these sequences may be different in both content and length.
For further information on ssdeep, visit its site: http://ssdeep.sourceforge.net/
Supported: TBI
Example:
SecRule REQUEST_BODY &quot;\\@fuzzyHash /path/to/ssdeep/hashes.txt 6&quot; &quot;id:192372,log,deny&quot; eq # Description: Performs numerical comparison and returns true if the input value is equal to the provided parameter. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect exactly 15 request headers SecRule &amp;REQUEST_HEADERS_NAMES &quot;@eq 15&quot; &quot;id:153&quot; Note: If a value is provided that cannot be converted to an integer (i.e a string) this operator will treat that value as 0.
ge # Description: Performs numerical comparison and returns true if the input value is greater than or equal to the provided parameter. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect 15 or more request headers SecRule &amp;REQUEST_HEADERS_NAMES &quot;@ge 15&quot; &quot;id:154&quot; Note: If a value is provided that cannot be converted to an integer (i.e a string) this operator will treat that value as 0.
geoLookup # Description: Performs a geolocation lookup using the IP address in input against the geolocation database previously configured using SecGeoLookupDb. If the lookup is successful, the obtained information is captured in the GEO collection.
Example: The geoLookup operator matches on success and is thus best used in combination with nolog,pass. If you wish to block on a failed lookup (which may be over the top, depending on how accurate the geolocation database is), the following example demonstrates how best to do it:
# Configure geolocation database SecGeoLookupDb /path/to/GeoLiteCity.dat ... # Lookup IP address SecRule REMOTE_ADDR &quot;@geoLookup&quot; &quot;phase:1,id:155,nolog,pass&quot; # Block IP address for which geolocation failed SecRule &amp;GEO &quot;@eq 0&quot; &quot;phase:1,id:156,deny,msg:'Failed to lookup IP'&quot; See the GEO variable for an example and more information on various fields available. Note: This operator supports the &ldquo;capture&rdquo; action.
gt # Description: Performs numerical comparison and returns true if the input value is greater than the operator parameter. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect more than 15 headers in a request SecRule &amp;REQUEST_HEADERS_NAMES &quot;@gt 15&quot; &quot;id:158&quot; Note: If a value is provided that cannot be converted to an integer (i.e a string) this operator will treat that value as 0.
inspectFile # Description: Executes an external program for every variable in the target list. The contents of the variable is provided to the script as the first parameter on the command line. The program must be specified as the first parameter to the operator. As of version 2.5.0, if the supplied program filename is not absolute, it is treated as relative to the directory in which the configuration file resides. Also as of version 2.5.0, if the filename is determined to be a Lua script (based on its .lua extension), the script will be processed by the internal Lua engine. Internally processed scripts will often run faster (there is no process creation overhead) and have full access to the transaction context of Coraza.
The inspectFile operator was initially designed for file inspection (hence the name), but it can also be used in any situation that requires decision making using external logic.
#!/usr/bin/perl # # runav.pl # Copyright (c) 2004-2011 Trustwave # # This script is an interface between Coraza and its # ability to intercept files being uploaded through the # web server, and ClamAV $CLAMSCAN = &quot;clamscan&quot;; if ($#ARGV != 0) { print &quot;Usage: runav.pl &lt;filename&gt;\\n&quot;; exit; } my ($FILE) = shift @ARGV; $cmd = &quot;$CLAMSCAN --stdout --no-summary $FILE&quot;; $input = \`$cmd\`; $input =~ m/^(.+)/; $error_message = $1; $output = &quot;0 Unable to parse clamscan output [$1]&quot;; if ($error_message =~ m/: Empty file\\.?$/) { $output = &quot;1 empty file&quot;; } elsif ($error_message =~ m/: (.+) ERROR$/) { $output = &quot;0 clamscan: $1&quot;; } elsif ($error_message =~ m/: (.+) FOUND$/) { $output = &quot;0 clamscan: $1&quot;; } elsif ($error_message =~ m/: OK$/) { $output = &quot;1 clamscan: OK&quot;; } print &quot;$output\\n&quot;; Example: Using the runav.pl script:
# Execute external program to validate uploaded files SecRule FILES_TMPNAMES &quot;@inspectFile /path/to/util/runav.pl&quot; &quot;id:159&quot; Note: Coraza will not fill the FILES_TMPNAMES variable unless SecTmpSaveUploadedFiles directive is On, or the SecUploadKeepFiles directive is set to RelevantOnly.
Note: Use @inspectFile with caution. It may not be safe to use @inspectFile with variables other than FILES_TMPNAMES. Other variables such as &ldquo;FULL_REQUEST&rdquo; may contains content that force your platform to fork process out of your control, making possible to an attacker to execute code using the same permissions of your web server. For other variables you may want to look at the Lua script engine. This observation was brought to our attention by &ldquo;Gryzli&rdquo;, on our users mailing list.
Reference: http://blog.spiderlabs.com/2010/10/advanced-topic-of-the-week-preventing-malicious-pdf-file-uploads.html
Reference: http://sourceforge.net/p/mod-security/mailman/mod-security-users/?viewmonth=201512
ipMatch # Description: Performs a fast ipv4 or ipv6 match of REMOTE_ADDR variable data. Can handle the following formats:
Full IPv4 Address - 192.168.1.100 Network Block/CIDR Address - 192.168.1.0/24 Full IPv6 Address - 2001:db8:85a3:8d3:1319:8a2e:370:7348 Network Block/CIDR Address - 2001:db8:85a3:8d3:1319:8a2e:370:0/24 Examples:
Individual Address:
SecRule REMOTE_ADDR &quot;@ipMatch 192.168.1.100&quot; &quot;id:161&quot; Multiple Addresses w/network block: SecRule REMOTE_ADDR &quot;@ipMatch 192.168.1.100,192.168.1.50,10.10.50.0/24&quot; &quot;id:162&quot; ipMatchF # short alias for ipMatchFromFile
ipMatchFromFile # Description: Performs a fast ipv4 or ipv6 match of REMOTE_ADDR variable, loading data from a file. Can handle the following formats:
Full IPv4 Address - 192.168.1.100 Network Block/CIDR Address - 192.168.1.0/24 Full IPv6 Address - 2001:db8:85a3:8d3:1319:8a2e:370:7348 Network Block/CIDR Address - 2001:db8:85a3:8d3:1319:8a2e:370:0/24 Examples:
SecRule REMOTE_ADDR &quot;@ipMatchFromFile ips.txt&quot; &quot;id:163&quot; The file ips.txt may contain:
192.168.0.1 172.16.0.0/16 10.0.0.0/8 Note: This operator also supports to load content served by an HTTPS server.
Note: When used with content served by a HTTPS server, the directive SecRemoteRulesFailAction can be used to configure a warning instead of an abort, when the remote content could not be retrieved.
le # Description: Performs numerical comparison and returns true if the input value is less than or equal to the operator parameter. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect 15 or fewer headers in a request SecRule &amp;REQUEST_HEADERS_NAMES &quot;@le 15&quot; &quot;id:164&quot; Note: If a value is provided that cannot be converted to an integer (i.e a string) this operator will treat that value as 0.
lt # Description: Performs numerical comparison and returns true if the input value is less than to the operator parameter. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect fewer than 15 headers in a request SecRule &amp;REQUEST_HEADERS_NAMES &quot;@lt 15&quot; &quot;id:165&quot; Note: If a value is provided that cannot be converted to an integer (i.e a string) this operator will treat that value as 0.
noMatch # Description: Will force the rule to always return false.
pm # Description: Performs a case-insensitive match of the provided phrases against the desired input value. The operator uses a set-based matching algorithm (Aho-Corasick), which means that it will match any number of keywords in parallel. When matching of a large number of keywords is needed, this operator performs much better than a regular expression.
Example:
# Detect suspicious client by looking at the user agent identification SecRule REQUEST_HEADERS:User-Agent &quot;@pm WebZIP WebCopier Webster WebStripper ... SiteSnagger ProWebWalker CheeseBot&quot; &quot;id:166&quot; 👉 This operator supports a snort/suricata content style. ie: "@pm A|42|C|44|F". ⚠️ This operator does not support macro expansion. Note: This operator supports the &ldquo;capture&rdquo; action.
pmf # Short alias for pmFromFile.
pmFromFile # Description: Performs a case-insensitive match of the provided phrases against the desired input value. The operator uses a set-based matching algorithm (Aho-Corasick), which means that it will match any number of keywords in parallel. When matching of a large number of keywords is needed, this operator performs much better than a regular expression.
This operator is the same as @pm, except that it takes a list of files as arguments. It will match any one of the phrases listed in the file(s) anywhere in the target value.
Example:
# Detect suspicious user agents using the keywords in # the files /path/to/blacklist1 and blacklist2 (the latter # must be placed in the same folder as the configuration file) SecRule REQUEST_HEADERS:User-Agent &quot;@pmFromFile /path/to/blacklist1 blacklist2&quot; &quot;id:167&quot; Notes:
Files must contain exactly one phrase per line. End of line markers (both LF and CRLF) will be stripped from each phrase and any whitespace trimmed from both the beginning and the end. Empty lines and comment lines (those beginning with the # character) will be ignored. To allow easier inclusion of phrase files with rule sets, relative paths may be used to the phrase files. In this case, the path of the file containing the rule is prepended to the phrase file path. The @pm operator phrases do not support metacharacters. Because this operator does not check for boundaries when matching, false positives are possible in some cases. For example, if you want to use @pm for IP address matching, the phrase 1.2.3.4 will potentially match more than one IP address (e.g., it will also match 1.2.3.40 or 1.2.3.41). To avoid the false positives, you can use your own boundaries in phrases. For example, use /1.2.3.4/ instead of just 1.2.3.4. Then, in your rules, also add the boundaries where appropriate. You will find a complete example in the example.
# Prepare custom REMOTE_ADDR variable SecAction &quot;phase:1,id:168,nolog,pass,setvar:tx.REMOTE_ADDR=/%{REMOTE_ADDR}/&quot; # Check if REMOTE_ADDR is blacklisted SecRule TX:REMOTE_ADDR &quot;@pmFromFile blacklist.txt&quot; &quot;phase:1,id:169,deny,msg:'Blacklisted IP address'&quot; The file blacklist.txt may contain:
# ip-blacklist.txt contents: # Note: All IPs must be prefixed/suffixed with &quot;/&quot; as the rules # will add in this character as a boundary to ensure # the entire IP is matched. # SecAction &quot;phase:1,id:170,pass,nolog,setvar:tx.remote_addr='/%{REMOTE_ADDR}/'&quot; /1.2.3.4/ /5.6.7.8/ Note: This operator supports a snort/suricata content style. ie: &ldquo;A|42|C|44|F&rdquo;.
Note II: This operator also supports to load content served by an HTTPS server. However, only one url can be used at a time.
rbl # Description: Looks up the input value in the RBL (real-time block list) given as parameter. The parameter can be an IPv4 address or a hostname.
Example:
SecRule REMOTE_ADDR &quot;@rbl sbl-xbl.spamhaus.org&quot; &quot;phase:1,id:171,t:none,pass,nolog,auditlog,msg:'RBL Match for SPAM Source',tag:'AUTOMATION/MALICIOUS',severity:'2',setvar:'tx.msg=%{rule.msg}',setvar:tx.automation_score=+%{tx.warning_anomaly_score},setvar:tx.anomaly_score=+%{tx.warning_anomaly_score}, \\ setvar:tx.%{rule.id}-AUTOMATION/MALICIOUS-%{matched_var_name}=%{matched_var},setvar:ip.spammer=1,expirevar:ip.spammer=86400,setvar:ip.previous_rbl_check=1,expirevar:ip.previous_rbl_check=86400,skipAfter:END_RBL_CHECK&quot; Note: If the RBL used is dnsbl.httpbl.org (Honeypot Project RBL) then the SecHttpBlKey directive must specify the user&rsquo;s registered API key.
Note: If the RBL used is either multi.uribl.com or zen.spamhaus.org combined RBLs, it is possible to also parse the return codes in the last octet of the DNS response to identify which specific RBL the IP was found in.
Note: This operator supports the &ldquo;capture&rdquo; action.
rsub # Description: Performs regular expression data substitution when applied to either the STREAM_INPUT_BODY or STREAM_OUTPUT_BODY variables. This operator also supports macro expansion. Starting with Coraza 2.7.0 this operator supports the syntax |hex| allowing users to use special chars like \\n \\r
Syntax: @rsub s/regex/str/[id]
Supported: TBI
Examples: Removing HTML Comments from response bodies:
SecStreamOutBodyInspection On SecRule STREAM_OUTPUT_BODY &quot;@rsub s// /&quot; &quot;phase:4,id:172,t:none,nolog,pass&quot; Note: If you plan to manipulate live data by using @rsub with the STREAM_ variables, you must also enable SecContentInjection directive. Regular expressions are handled by the PCRE library http://www.pcre.org. Coraza compiles its regular expressions with the following settings:
The entire input is treated as a single line, even when there are newline characters present. All matches are case-sensitive. If you wish to perform case-insensitive matching, you can either use the lowercase transformation function or force case-insensitive matching by prefixing the regular expression pattern with the (?i) modifier (a PCRE feature; you will find many similar features in the PCRE documentation). Also a flag [d] should be used if you want to escape the regex string chars when use macro expansion. The PCRE_DOTALL and PCRE_DOLLAR_ENDONLY flags are set during compilation, meaning that a single dot will match any character, including the newlines, and a $ end anchor will not match a trailing newline character. Regular expressions are a very powerful tool. You are strongly advised to read the PCRE documentation to get acquainted with its features.
Note: This operator supports the &ldquo;capture&rdquo; action.
rx # Description: Performs a regular expression match of the pattern provided as parameter. This is the default operator; the rules that do not explicitly specify an operator default to @rx.
Examples:
# Detect Nikto SecRule REQUEST_HEADERS:User-Agent &quot;@rx nikto&quot; phase:1,id:173,t:lowercase SecRule REQUEST_HEADERS:User-Agent &quot;@rx (?i)nikto&quot; phase:1,id:174,t:none # Detect Nikto with a case-insensitive pattern # Detect Nikto with a case-insensitive pattern SecRule REQUEST_HEADERS:User-Agent &quot;(?i)nikto&quot; &quot;id:175&quot; Regular expressions are handled by the RE2. Coraza compiles its regular expressions with the following settings:
The entire input is treated as a single line, even when there are newline characters present. All matches are case-sensitive. If you wish to perform case-insensitive matching, you can either use the lowercase transformation function or force case-insensitive matching by prefixing the regular expression pattern with the (?i) modifier (a PCRE feature; you will find many similar features in the PCRE documentation). A single dot will match any character, including the newlines, and a $ end anchor will not match a trailing newline character. Regular expressions are a very powerful tool. You are strongly advised to read the PCRE documentation to get acquainted with its features.
Note: This operator supports the &ldquo;capture&rdquo; action.
streq # Description: Performs a string comparison and returns true if the parameter string is identical to the input string. Macro expansion is performed on the parameter string before comparison.
Example:
# Detect request parameters &quot;foo&quot; that do not # contain &quot;bar&quot;, exactly. SecRule ARGS:foo &quot;!@streq bar&quot; &quot;id:176&quot; strmatch # Description: Performs a string match of the provided word against the desired input value. The operator uses the pattern matching Boyer-Moore-Horspool algorithm, which means that it is a single pattern matching operator. This operator performs much better than a regular expression.
Example:
# Detect suspicious client by looking at the user agent identification SecRule REQUEST_HEADERS:User-Agent &quot;@strmatch WebZIP&quot; &quot;id:177&quot; Note: Starting on Coraza v2.6.0 this operator supports a snort/suricata content style. ie: &ldquo;@strmatch A|42|C|44|F&rdquo;. unconditionalMatch
Description: Will force the rule to always return true. This is similar to SecAction however all actions that occur as a result of a rule matching will fire such as the setting of MATCHED_VAR. This can also be part a chained rule.
Example:
SecRule REMOTE_ADDR &quot;@unconditionalMatch&quot; &quot;id:1000,phase:1,pass,nolog,t:hexEncode,setvar:TX.ip_hash=%{MATCHED_VAR}&quot; validateByteRange # Description: Validates that the byte values used in input fall into the range specified by the operator parameter. This operator matches on an input value that contains bytes that are not in the specified range.
Example:
# Enforce very strict byte range for request parameters (only # works for the applications that do not use the languages other # than English). SecRule ARGS &quot;@validateByteRange 10, 13, 32-126&quot; &quot;id:178&quot; The validateByteRange is most useful when used to detect the presence of NUL bytes, which don’t have a legitimate use, but which are often used as an evasion technique.
# Do not allow NUL bytes SecRule ARGS &quot;@validateByteRange 1-255&quot; &quot;id:179&quot; Note: You can force requests to consist only of bytes from a certain byte range. This can be useful to avoid stack overflow attacks (since they usually contain &ldquo;random&rdquo; binary content). Default range values are 0 and 255, i.e. all byte values are allowed. This directive does not check byte range in a POST payload when multipart/form-data encoding (file upload) is used. Doing so would prevent binary files from being uploaded. However, after the parameters are extracted from such request they are checked for a valid range.
validateHash # Description: Validates REQUEST_URI that contains data protected by the hash engine.
Supported: TBI
Example:
# Validates requested URI that matches a regular expression. SecRule REQUEST_URI &quot;@validatehash &quot;product_info|product_list&quot; &quot;phase:1,deny,id:123456&quot; validateUrlEncoding # Description: Validates the URL-encoded characters in the provided input string.
Example:
# Validate URL-encoded characters in the request URI SecRule REQUEST_URI_RAW &quot;@validateUrlEncoding&quot; &quot;id:192&quot; Coraza will automatically decode the URL-encoded characters in request parameters, which means that there is little sense in applying the @validateUrlEncoding operator to them —that is, unless you know that some of the request parameters were URL-encoded more than once. Use this operator against raw input, or against the input that you know is URL-encoded. For example, some applications will URL-encode cookies, although that’s not in the standard. Because it is not in the standard, Coraza will neither validate nor decode such encodings.
validateUtf8Encoding # Description: Check whether the input is a valid UTF-8 string.
Example:
# Make sure all request parameters contain only valid UTF-8 SecRule ARGS &quot;@validateUtf8Encoding&quot; &quot;id:193&quot; The @validateUtf8Encoding operator detects the following problems:
Not enough bytes : UTF-8 supports two-, three-, four-, five-, and six-byte encodings. Coraza will locate cases when one or more bytes is/are missing from a character. Invalid characters : The two most significant bits in most characters should be fixed to 0x80. Some attack techniques use different values as an evasion technique. Overlong characters : ASCII characters are mapped directly into UTF-8, which means that an ASCII character is one UTF-8 character at the same time. However, in UTF-8 many ASCII characters can also be encoded with two, three, four, five, and six bytes. This is no longer legal in the newer versions of Unicode, but many older implementations still support it. The use of overlong UTF-8 characters is common for evasion. Notes :
Most, but not all applications use UTF-8. If you are dealing with an application that does, validating that all request parameters are valid UTF-8 strings is a great way to prevent a number of evasion techniques that use the assorted UTF-8 weaknesses. False positives are likely if you use this operator in an application that does not use UTF-8. Many web servers will also allow UTF-8 in request URIs. If yours does, you can verify the request URI using @validateUtf8Encoding. verifyCC # Description: Detects credit card numbers in input. This operator will first use the supplied regular expression to perform an initial match, following up with the Luhn algorithm calculation to minimize false positives.
Supported on Coraza: TBI
Example:
# Detect credit card numbers in parameters and # prevent them from being logged to audit log SecRule ARGS &quot;@verifyCC \\d{13,16}&quot; &quot;phase:2,id:194,nolog,pass,msg:'Potential credit card number',sanitiseMatched&quot; Note: This operator supports the &ldquo;capture&rdquo; action.
within # Description: Returns true if the input value (the needle) is found anywhere within the @within parameter (the haystack). Macro expansion is performed on the parameter string before comparison.
Example:
# Detect request methods other than GET, POST and HEAD SecRule REQUEST_METHOD &quot;!@within GET,POST,HEAD&quot; Note: There are no delimiters for this operator, it is therefore often necessary to artificially impose some; this can be done using setvar. For instance in the example below, without the imposed delimiters (of &lsquo;/&rsquo;) this rule would also match on the &lsquo;range&rsquo; header (along with many other combinations), since &lsquo;range&rsquo; is within the provided parameter. With the imposed delimiters, the rule would check for &lsquo;/range/&rsquo; when the range header is provided, and therefore would not match since &lsquo;/range/ is not part of the @within parameter.
SecRule REQUEST_HEADERS_NAMES &quot;@rx ^.*$&quot; \\ &quot;chain,\\ id:1,\\ block,\\ t:lowercase,\\ setvar:'tx.header_name=/%{tx.0}/'&quot; SecRule TX:header_name &quot;@within /proxy/ /lock-token/ /content-range/ /translate/ /if/&quot; &quot;t:none&quot; `}),e.add({id:6,href:"/docs/seclang/transformations/",title:"Transformations",description:"Transformation functions are used to alter input data before it is used in matching.",content:`In the following example, the request parameter values are converted to lowercase before matching:
SecRule ARGS &quot;xp_cmdshell&quot; &quot;t:lowercase,id:91&quot; Multiple transformation actions can be used in the same rule, forming a transformation pipeline. The transformations will be performed in the order in which they appear in the rule.
In most cases, the order in which transformations are performed is very important. In the following example, a series of transformation functions is performed to counter evasion. Performing the transformations in any other order would allow a skillful attacker to evade detection:
SecRule ARGS &quot;(asfunction|javascript|vbscript|data|mocha|livescript):&quot; &quot;id:92,t:none,t:htmlEntityDecode,t:lowercase,t:removeNulls,t:removeWhitespace&quot; 👉 Warning : It is currently possible to use SecDefaultAction to specify a default list of transformation functions, which will be applied to all rules that follow the SecDefaultAction directive. However, this practice is not recommended, because it means that mistakes are very easy to make. It is recommended that you always specify the transformation functions that are needed by a particular rule, starting the list with t:none (which clears the possibly inherited transformation functions). The remainder of this section documents the transformation functions currently available in Coraza.
base64Decode # Decodes a Base64-encoded string.
SecRule REQUEST_HEADERS:Authorization &quot;^Basic ([a-zA-Z0-9]+=*)$&quot; &quot;phase:1,id:93,capture,chain,logdata:%{TX.1}&quot; SecRule TX:1 ^(\\w+): t:base64Decode,capture,chain SecRule TX:1 ^(admin|root|backup)$ Note : Be careful when applying base64Decode with other transformations. The order of your transformation matters in this case as certain transformations may change or invalidate the base64 encoded string prior to being decoded (i.e t:lowercase, etc). This of course means that it is also very difficult to write a single rule that checks for a base64decoded value OR an unencoded value with transformations, it is best to write two rules in this situation. sqlHexDecode Decode sql hex data. Example (0x414243) will be decoded to (ABC).
base64DecodeExt # Decodes a Base64-encoded string. Unlike base64Decode, this version uses a forgiving implementation, which ignores invalid characters.
See blog post on Base64Decoding evasion issues on PHP sites - http://blog.spiderlabs.com/2010/04/impedance-mismatch-and-base64.html
base64Encode # Encodes input string using Base64 encoding.
cmdLine # In Windows and Unix, commands may be escaped by different means, such as:
c^ommand /c &hellip; &ldquo;command&rdquo; /c &hellip; command,/c &hellip; backslash in the middle of a Unix command The cmdLine transformation function avoids this problem by manipulating the variable contend in the following ways:
deleting all backslashes [] deleting all double quotes [&quot;] deleting all single quotes ['] deleting all carets [^] deleting spaces before a slash / deleting spaces before an open parentesis [(] replacing all commas [,] and semicolon [;] into a space replacing all multiple spaces (including tab, newline, etc.) into one space transform all characters to lowercase Example Usage:
SecRule ARGS &quot;(?:command(?:.com)?|cmd(?:.exe)?)(?:/.*)?/[ck]&quot; &quot;phase:2,id:94,t:none, t:cmdLine&quot; compressWhitespace # Converts any of the whitespace characters (0x20, \\f, \\t, \\n, \\r, \\v, 0xa0) to spaces (ASCII 0x20), compressing multiple consecutive space characters into one.
cssDecode # Decodes characters encoded using the CSS 2.x escape rules syndata.html#characters. This function uses only up to two bytes in the decoding process, meaning that it is useful to uncover ASCII characters encoded using CSS encoding (that wouldn’t normally be encoded), or to counter evasion, which is a combination of a backslash and non-hexadecimal characters (e.g., ja\\vascript is equivalent to javascript).
escapeSeqDecode # Decodes ANSI C escape sequences: \\a, \\b, \\f, \\n, \\r, \\t, \\v, \\, ?, ', &quot;, \\xHH (hexadecimal), \\0OOO (octal). Invalid encodings are left in the output.
hexDecode # Decodes a string that has been encoded using the same algorithm as the one used in hexEncode (see following entry).
hexEncode # Encodes string (possibly containing binary characters) by replacing each input byte with two hexadecimal characters. For example, xyz is encoded as 78797a.
htmlEntityDecode # Decodes the characters encoded as HTML entities. The following variants are supported:
HH and HH; (where H is any hexadecimal number) DDD and DDD; (where D is any decimal number) &amp;quotand&quot; &amp;nbspand &amp;ltand&lt; &amp;gtand&gt; This function always converts one HTML entity into one byte, possibly resulting in a loss of information (if the entity refers to a character that cannot be represented with the single byte). It is thus useful to uncover bytes that would otherwise not need to be encoded, but it cannot do anything meaningful with the characters from the range above 0xff.
jsDecode # Decodes JavaScript escape sequences. If a \\uHHHH code is in the range of FF01-FF5E (the full width ASCII codes), then the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte will be used and the higher byte zeroed (leading to possible loss of information).
length # Looks up the length of the input string in bytes, placing it (as string) in output. For example, if it gets ABCDE on input, this transformation function will return 5 on output.
lowercase # Converts all characters to lowercase using the current C locale.
md5 # Calculates an MD5 hash from the data in input. The computed hash is in a raw binary form and may need encoded into text to be printed (or logged). Hash functions are commonly used in combination with hexEncode (for example: t:md5,t:hexEncode).
none # Not an actual transformation function, but an instruction to Coraza to remove all transformation functions associated with the current rule.
normalizePath # Removes multiple slashes, directory self-references, and directory back-references (except when at the beginning of the input) from input string.
normalizePathWin # Same as normalizePath, but first converts backslash characters to forward slashes.
parityEven7bit # Calculates even parity of 7-bit data replacing the 8th bit of each target byte with the calculated parity bit.
parityOdd7bit # Calculates odd parity of 7-bit data replacing the 8th bit of each target byte with the calculated parity bit.
parityZero7bit # Calculates zero parity of 7-bit data replacing the 8th bit of each target byte with a zero-parity bit, which allows inspection of even/odd parity 7-bit data as ASCII7 data.
removeNulls # Removes all NUL bytes from input.
removeWhitespace # Removes all whitespace characters from input.
replaceComments # Replaces each occurrence of a C-style comment (/&hellip;/) with a single space (multiple consecutive occurrences of which will not be compressed). Unterminated comments will also be replaced with a space (ASCII 0x20). However, a standalone termination of a comment (*/) will not be acted upon.
removeCommentsChar # Removes common comments chars (/,/, &ndash;, #).
removeComments # Removes each occurrence of comment (/&hellip;/, &ndash;, #). Multiple consecutive occurrences of which will not be compressed.
Note : This transformation is known to be unreliable, might cause some unexpected behaviour and could be deprecated soon in a future release. Refer to issue #1207 for further information..
replaceNulls # Replaces NUL bytes in input with space characters (ASCII 0x20).
urlDecode # Decodes a URL-encoded input string. Invalid encodings (i.e., the ones that use non-hexadecimal characters, or the ones that are at the end of string and have one or two bytes missing) are not converted, but no error is raised. To detect invalid encodings, use the @validateUrlEncoding operator on the input data first. The transformation function should not be used against variables that have already been URL-decoded (such as request parameters) unless it is your intention to perform URL decoding twice!
uppercase # Converts all characters to uppercase using the current C locale.
urlDecodeUni # Like urlDecode, but with support for the Microsoft-specific %u encoding. If the code is in the range of FF01-FF5E (the full-width ASCII codes), then the higher byte is used to detect and adjust the lower byte. Otherwise, only the lower byte will be used and the higher byte zeroed.
urlEncode # Encodes input string using URL encoding.
utf8toUnicode # Converts all UTF-8 characters sequences to Unicode. This help input normalization specially for non-english languages minimizing false-positives and false-negatives.
sha1 # Calculates a SHA1 hash from the input string. The computed hash is in a raw binary form and may need encoded into text to be printed (or logged). Hash functions are commonly used in combination with hexEncode (for example, t:sha1,t:hexEncode).
trimLeft # Removes whitespace from the left side of the input string.
trimRight # Removes whitespace from the right side of the input string.
trim # Removes whitespace from both the left and right sides of the input string.
`}),e.add({id:7,href:"/docs/seclang/variables/",title:"Variables",description:`ARGS # ARGS is a collection and can be used on its own (means all arguments including the POST Payload), with a static parameter (matches arguments with that name), or with a regular expression (matches all arguments with name that matches the regular expression). To look at only the query string or body arguments, see the ARGS_GET and ARGS_POST collections.
Some variables are actually collections, which are expanded into more variables at runtime.`,content:`ARGS # ARGS is a collection and can be used on its own (means all arguments including the POST Payload), with a static parameter (matches arguments with that name), or with a regular expression (matches all arguments with name that matches the regular expression). To look at only the query string or body arguments, see the ARGS_GET and ARGS_POST collections.
Some variables are actually collections, which are expanded into more variables at runtime. The following example will examine all request arguments:
SecRule ARGS dirty &quot;id:7&quot; Sometimes, however, you will want to look only at parts of a collection. This can be achieved with the help of the selection operator(colon). The following example will only look at the arguments named p (do note that, in general, requests can contain multiple arguments with the same name):
SecRule ARGS:p dirty &quot;id:8&quot; It is also possible to specify exclusions. The following will examine all request arguments for the word dirty, except the ones named z (again, there can be zero or more arguments named z):
SecRule ARGS|!ARGS:z dirty &quot;id:9&quot; There is a special operator that allows you to count how many variables there are in a collection. The following rule will trigger if there is more than zero arguments in the request (ignore the second parameter for the time being):
SecRule &amp;ARGS !^0$ &quot;id:10&quot; And sometimes you need to look at an array of parameters, each with a slightly different name. In this case you can specify a regular expression in the selection operator itself. The following rule will look into all arguments whose names begin with id_:
SecRule ARGS:/^id_/ dirty &quot;id:11&quot; Note : Using ARGS:p will not result in any invocations against the operator if argument p does not exist.
ARGS_COMBINED_SIZE # Contains the combined size of all request parameters. Files are excluded from the calculation. This variable can be useful, for example, to create a rule to ensure that the total size of the argument data is below a certain threshold. The following rule detects a request whose parameters are more than 2500 bytes long:
SecRule ARGS_COMBINED_SIZE &quot;@gt 2500&quot; &quot;id:12&quot; ARGS_GET # ARGS_GET is similar to ARGS, but contains only query string parameters.
ARGS_GET_NAMES # ARGS_GET_NAMES is similar to ARGS_NAMES, but contains only the names of query string parameters.
ARGS_NAMES # Contains all request parameter names. You can search for specific parameter names that you want to inspect. In a positive policy scenario, you can also whitelist (using an inverted rule with the exclamation mark) only the authorized argument names. This example rule allows only two argument names: p and a:
SecRule ARGS_NAMES &quot;!^(p|a)$&quot; &quot;id:13&quot; ARGS_POST # ARGS_POST is similar to ARGS, but only contains arguments from the POST body.
ARGS_POST_NAMES # ARGS_POST_NAMES is similar to ARGS_NAMES, but contains only the names of request body parameters.
AUTH_TYPE # Not Implemented yet
This variable holds the authentication method used to validate a user, if any of the methods built into HTTP are used. In a reverse-proxy deployment, this information will not be available if the authentication is handled in the backend web server.
SecRule AUTH_TYPE &quot;Basic&quot; &quot;id:14&quot; DURATION # Not Implemented yet
Contains the number of microseconds elapsed since the beginning of the current transaction.
ENV # Not Implemented yet
Collection that provides access to environment variables set by Coraza or other server modules. Requires a single parameter to specify the name of the desired variable.
# Set environment variable SecRule REQUEST_FILENAME &quot;printenv&quot; \\ &quot;phase:2,id:15,pass,setenv:tag=suspicious&quot; # Inspect environment variable SecRule ENV:tag &quot;suspicious&quot; &quot;id:16&quot; # Reading an environment variable from other Apache module (mod_ssl) SecRule TX:ANOMALY_SCORE &quot;@gt 0&quot; &quot;phase:5,id:16,msg:'%{env.ssl_cipher}'&quot; Note : Use setenv to set environment variables to be accessed by Apache.
FILES # Contains a collection of original file names (as they were called on the remote user’s filesys- tem). Available only on inspected multipart/form-data requests.
SecRule FILES &quot;@rx \\.conf$&quot; &quot;id:17&quot; Note : Only available if files were extracted from the request body.
FILES_COMBINED_SIZE # Contains the total size of the files transported in request body. Available only on inspected multipart/form-data requests.
SecRule FILES_COMBINED_SIZE &quot;@gt 100000&quot; &quot;id:18&quot; FILES_NAMES # Contains a list of form fields that were used for file upload. Available only on inspected multipart/form-data requests.
SecRule FILES_NAMES &quot;^upfile$&quot; &quot;id:19&quot; FULL_REQUEST_LENGTH # Represents the amount of bytes that FULL_REQUEST may use.
SecRule FULL_REQUEST_LENGTH &quot;@eq 205&quot; &quot;id:21&quot; FILES_SIZES # Contains a list of individual file sizes. Useful for implementing a size limitation on individual uploaded files. Available only on inspected multipart/form-data requests.
SecRule FILES_SIZES &quot;@gt 100&quot; &quot;id:20&quot; FILES_TMPNAMES # Contains a list of temporary files’ names on the disk. Useful when used together with @inspectFile. Available only on inspected multipart/form-data requests.
SecRule FILES_TMPNAMES &quot;@inspectFile /path/to/inspect_script.pl&quot; &quot;id:21&quot; FILES_TMP_CONTENT # Contains a key-value set where value is the content of the file which was uploaded. Useful when used together with @fuzzyHash.
SecRule FILES_TMP_CONTENT &quot;@fuzzyHash $ENV{CONF_DIR}/ssdeep.txt 1&quot; &quot;id:192372,log,deny&quot; Note : SecUploadKeepFiles should be set to &lsquo;On&rsquo; in order to have this collection filled.
GEO # GEO is a collection populated by the results of the last @geoLookup operator. The collection can be used to match geographical fields looked from an IP address or hostname.
Fields:
COUNTRY_CODE: Two character country code. EX: US, CL, GB, etc. COUNTRY_CODE3: Up to three character country code. COUNTRY_NAME: The full country name. COUNTRY_CONTINENT: The two character continent that the country is located. EX: EU REGION: The two character region. For US, this is state. For Chile, region, etc. CITY: The city name if supported by the database. POSTAL_CODE: The postal code if supported by the database. LATITUDE: The latitude if supported by the database. LONGITUDE: The longitude if supported by the database. Example:
SecGeoLookupDb maxminddb file=/usr/local/geo/data/GeoLiteCity.dat ... SecRule REMOTE_ADDR &quot;@geoLookup&quot; &quot;chain,id:22,drop,msg:'Non-GB IP address'&quot; SecRule GEO:COUNTRY_CODE &quot;!@streq GB&quot; HIGHEST_SEVERITY # This variable holds the highest severity of any rules that have matched so far. Severities are numeric values and thus can be used with comparison operators such as @lt, and so on. A value of 255 indicates that no severity has been set.
SecRule HIGHEST_SEVERITY &quot;@le 2&quot; &quot;phase:2,id:23,deny,status:500,msg:'severity %{HIGHEST_SEVERITY}'&quot; Note : Higher severities have a lower numeric value.
INBOUND_DATA_ERROR # This variable will be set to 1 when the request body size is above the setting configured by SecRequestBodyLimit directive. Your policies should always contain a rule to check this variable. Depending on the rate of false positives and your default policy you should decide whether to block or just warn when the rule is triggered.
The best way to use this variable is as in the example below:
SecRule INBOUND_DATA_ERROR &quot;@eq 1&quot; &quot;phase:1,id:24,t:none,log,pass,msg:'Request Body Larger than SecRequestBodyLimit Setting'&quot; MATCHED_VAR # This variable holds the value of the most-recently matched variable. It is similar to the TX:0, but it is automatically supported by all operators and there is no need to specify the capture action.
SecRule ARGS pattern chain,deny,id:25 SecRule MATCHED_VAR &quot;further scrutiny&quot; Note : Be aware that this variable holds data for the last operator match. This means that if there are more than one matches, only the last one will be populated. Use MATCHED_VARS variable if you want all matches.
MATCHED_VARS # Similar to MATCHED_VAR except that it is a collection of all matches for the current operator check.
SecRule ARGS pattern &quot;chain,deny,id:26&quot; SecRule MATCHED_VARS &quot;@eq ARGS:param&quot; MATCHED_VAR_NAME # This variable holds the full name of the variable that was matched against.
SecRule ARGS pattern &quot;chain,deny,id:27&quot; SecRule MATCHED_VAR_NAME &quot;@eq ARGS:param&quot; Note : Be aware that this variable holds data for the last operator match. This means that if there are more than one matches, only the last one will be populated. Use MATCHED_VARS_NAMES variable if you want all matches.
MATCHED_VARS_NAMES # Similar to MATCHED_VAR_NAME except that it is a collection of all matches for the current operator check.
SecRule ARGS pattern &quot;chain,deny,id:28&quot; SecRule MATCHED_VARS_NAMES &quot;@eq ARGS:param&quot; MULTIPART_FILENAME # This variable contains the multipart data from field FILENAME.
MULTIPART_NAME # This variable contains the multipart data from field NAME.
OUTBOUND_DATA_ERROR # This variable will be set to 1 when the response body size is above the setting configured by SecResponseBodyLimit directive. Your policies should always contain a rule to check this variable. Depending on the rate of false positives and your default policy you should decide whether to block or just warn when the rule is triggered.
The best way to use this variable is as in the example below:
SecRule OUTBOUND_DATA_ERROR &quot;@eq 1&quot; &quot;phase:1,id:32,t:none,log,pass,msg:'Response Body Larger than SecResponseBodyLimit Setting'&quot; PATH_INFO # Contains the extra request URI information, also known as path info. (For example, in the URI /index.php/123, /123 is the path info.) Available only in embedded deployments.
SecRule PATH_INFO &quot;^/(bin|etc|sbin|opt|usr)&quot; &quot;id:33&quot; PERF_ALL # Not Implemented yet
This special variable contains a string that’s a combination of all other performance variables, arranged in the same order in which they appear in the Stopwatch2 audit log header. It’s intended for use in custom Apache logs
Supported on Coraza: TBI
PERF_COMBINED # Not Implemented yet
Contains the time, in microseconds, spent in Coraza during the current transaction. The value in this variable is arrived to by adding all the performance variables except PERF_SREAD (the time spent reading from persistent storage is already included in the phase measurements).
Supported on Coraza: TBI
PERF_GC Contains the time, in microseconds, spent performing garbage collection.
Supported on Coraza: TBI
PERF_LOGGING # Not Implemented yet
Contains the time, in microseconds, spent in audit logging. This value is known only after the handling of a transaction is finalized, which means that it can only be logged using mod_log_config and the %{VARNAME}M syntax.
Supported on Coraza: TBI
PERF_PHASE1 # Not Implemented yet
Contains the time, in microseconds, spent processing phase 1.
Supported on Coraza: TBI
PERF_PHASE2 # Not Implemented yet
Contains the time, in microseconds, spent processing phase 2.
Supported on Coraza: TBI
PERF_PHASE3 # Not Implemented yet
Contains the time, in microseconds, spent processing phase 3.
Supported on Coraza: TBI
PERF_PHASE4 # Not Implemented yet
Contains the time, in microseconds, spent processing phase 4.
Supported on Coraza: TBI
PERF_PHASE5 # Not Implemented yet
Contains the time, in microseconds, spent processing phase 5.
Supported on Coraza: TBI
PERF_RULES # Not Implemented yet
PERF_RULES is a collection, that is populated with the rules hitting the performance threshold defined with SecRulePerfTime. The collection contains the time, in microseconds, spent processing the individual rule. The various items in the collection can be accessed via the rule id.
Supported on Coraza: TBI
SecRulePerfTime 100 SecRule FILES_TMPNAMES &quot;@inspectFile /path/to/util/runav.pl&quot; \\ &quot;phase:2,id:10001,deny,log,msg:'Virus scan detected an error.'&quot; SecRule &amp;PERF_RULES &quot;@eq 0&quot; &quot;phase:5,id:95000,\\ pass,log,msg:'All rules performed below processing time limit.'&quot; SecRule PERF_RULES &quot;@ge 1000&quot; &quot;phase:5,id:95001,pass,log,\\ msg:'Rule %{MATCHED_VAR_NAME} spent at least 1000 usec.'&quot; SecAction &quot;phase:5,id:95002,pass,log, msg:'File inspection took %{PERF_RULES.10001} usec.'&quot; The rule with id 10001 defines an external file inspection rule. The rule with id 95000 checks the size of the PERF_RULES collection. If the collection is empty, it writes a note in the logfile. Rule 95001 is executed for every item in the PERF_RULES collection. Every item is thus being checked against the limit of 1000 microseconds. If the rule spent at least that amount of time, then a note containing the rule id is being written to the logfile. The final rule 95002 notes the time spent in rule 10001 (the virus inspection).
PERF_SREAD # Not Implemented yet
Contains the time, in microseconds, spent reading from persistent storage.
Supported on Coraza: TBI
PERF_SWRITE # Not Implemented yet
Contains the time, in microseconds, spent writing to persistent storage.
Supported on Coraza: TBI
QUERY_STRING # Contains the query string part of a request URI. The value in QUERY_STRING is always provided raw, without URL decoding taking place.
SecRule QUERY_STRING &quot;attack&quot; &quot;id:34&quot; REMOTE_ADDR # This variable holds the IP address of the remote client.
SecRule REMOTE_ADDR &quot;@ipMatch 192.168.1.101&quot; &quot;id:35&quot; REMOTE_HOST # If the Apache directive HostnameLookups is set to On, then this variable will hold the remote hostname resolved through DNS. If the directive is set to Off, this variable it will hold the remote IP address (same as REMOTE_ADDR). Possible uses for this variable would be to deny known bad client hosts or network blocks, or conversely, to allow in authorized hosts.
SecRule REMOTE_HOST &quot;\\.evil\\.network\\org$&quot; &quot;id:36&quot; REMOTE_PORT # This variable holds information on the source port that the client used when initiating the connection to our web server.
In the following example, we are evaluating to see whether the REMOTE_PORT is less than 1024, which would indicate that the user is a privileged user:
SecRule REMOTE_PORT &quot;@lt 1024&quot; &quot;id:37&quot; REMOTE_USER # This variable holds the username of the authenticated user. If there are no password access controls in place (Basic or Digest authentication), then this variable will be empty.
SecRule REMOTE_USER &quot;@streq admin&quot; &quot;id:38&quot; Note : In a reverse-proxy deployment, this information will not be available if the authentication is handled in the backend web server.
REQBODY_ERROR # Contains the status of the request body processor used for request body parsing. The values can be 0 (no error) or 1 (error). This variable will be set by request body processors (typically the multipart/request-data parser, JSON or the XML parser) when they fail to do their work.
SecRule REQBODY_ERROR &quot;@eq 1&quot; deny,phase:2,id:39 Note : Your policies must have a rule to check for request body processor errors at the very beginning of phase 2. Failure to do so will leave the door open for impedance mismatch attacks. It is possible, for example, that a payload that cannot be parsed by Coraza can be successfully parsed by more tolerant parser operating in the application. If your policy dictates blocking, then you should reject the request if error is detected. When operating in detection-only mode, your rule should alert with high severity when request body processing fails.
REQBODY_ERROR_MSG # If there’s been an error during request body parsing, the variable will contain the following error message:
SecRule REQBODY_ERROR_MSG &quot;failed to parse&quot; &quot;id:40&quot; REQBODY_PROCESSOR # Contains the name of the currently used request body processor. The possible values are URLENCODED, JSON, MULTIPART, and XML.
SecRule REQBODY_PROCESSOR &quot;^XML$ chain,id:41 SecRule XML://* &quot;something&quot; &quot;id:123&quot; REQUEST_BASENAME # This variable holds just the filename part of REQUEST_FILENAME (e.g., index.php).
SecRule REQUEST_BASENAME &quot;^login\\.php$&quot; phase:2,id:42,t:none,t:lowercase Note : Please note that anti-evasion transformations are not applied to this variable by default. REQUEST_BASENAME will recognize both / and \\ as path separators. You should understand that the value of this variable depends on what was provided in request, and that it does not have to correspond to the resource (on disk) that will be used by the web server.
REQUEST_BODY # Holds the raw request body. This variable is available only if the URLENCODED request body processor was used, which will occur by default when the application/x-www-form-urlencoded content type is detected, or if the use of the URLENCODED request body parser was forced.
SecRule REQUEST_BODY &quot;^username=\\w{25,}\\&amp;password=\\w{25,}\\&amp;Submit\\=login$&quot; &quot;id:43&quot; It is possible to force the presence of the REQUEST_BODY variable, but only when there is no request body processor defined using the ctl:forceRequestBodyVariable option in the REQUEST_HEADERS phase.
REQUEST_BODY_LENGTH # Contains the number of bytes read from a request body.
REQUEST_COOKIES # This variable is a collection of all of request cookies (values only). Example: the following example is using the Ampersand special operator to count how many variables are in the collection. In this rule, it would trigger if the request does not include any Cookie headers.
SecRule &amp;REQUEST_COOKIES &quot;@eq 0&quot; &quot;id:44&quot; REQUEST_COOKIES_NAMES # This variable is a collection of the names of all request cookies. For example, the following rule will trigger if the JSESSIONID cookie is not present:
SecRule &amp;REQUEST_COOKIES_NAMES:JSESSIONID &quot;@eq 0&quot; &quot;id:45&quot; REQUEST_FILENAME # This variable holds the relative request URL without the query string part (e.g., /index.php).
SecRule REQUEST_FILENAME &quot;^/cgi-bin/login\\.php$&quot; phase:2,id:46,t:none,t:normalizePath Note : Please note that anti-evasion transformations are not used on REQUEST_FILENAME, which means that you will have to specify them in the rules that use this variable.
REQUEST_HEADERS # This variable can be used as either a collection of all of the request headers or can be used to inspect selected headers (by using the REQUEST_HEADERS:Header-Name syntax).
SecRule REQUEST_HEADERS:Host &quot;^[\\d\\.]+$&quot; &quot;deny,id:47,log,status:400,msg:'Host header is a numeric IP address'&quot; Note: Coraza will treat multiple headers that have identical names as a &ldquo;list&rdquo;, processing each single value.
REQUEST_HEADERS_NAMES # This variable is a collection of the names of all of the request headers.
SecRule REQUEST_HEADERS_NAMES &quot;^x-forwarded-for&quot; &quot;log,deny,id:48,status:403,t:lowercase,msg:'Proxy Server Used'&quot; REQUEST_LINE # This variable holds the complete request line sent to the server (including the request method and HTTP version information).
# Allow only POST, GET and HEAD request methods, as well as only # the valid protocol versions SecRule REQUEST_LINE &quot;!(^((?:(?:POS|GE)T|HEAD))|HTTP/(0\\.9|1\\.0|1\\.1)$)&quot; &quot;phase:1,id:49,log,block,t:none&quot; REQUEST_METHOD # This variable holds the request method used in the transaction.
SecRule REQUEST_METHOD &quot;^(?:CONNECT|TRACE)$&quot; &quot;id:50,t:none&quot; REQUEST_PROTOCOL # This variable holds the request protocol version information.
SecRule REQUEST_PROTOCOL &quot;!^HTTP/(0\\.9|1\\.0|1\\.1)$&quot; &quot;id:51&quot; ## REQUEST_URI
This variable holds the full request URL including the query string data (e.g., /index.php? p=X). However, it will never contain a domain name, even if it was provided on the request line.
SecRule REQUEST_URI &quot;attack&quot; &quot;phase:1,id:52,t:none,t:urlDecode,t:lowercase,t:normalizePath&quot; Note : Please note that anti-evasion transformations are not used on REQUEST_URI, which means that you will have to specify them in the rules that use this variable.
REQUEST_URI_RAW # Same as REQUEST_URI but will contain the domain name if it was provided on the request line (e.g., http://www.example.com/index.php?p=X).
SecRule REQUEST_URI_RAW &quot;http:/&quot; &quot;phase:1,id:53,t:none,t:urlDecode,t:lowercase,t:normalizePath&quot; Note : Please note that anti-evasion transformations are not used on REQUEST_URI_RAW, which means that you will have to specify them in the rules that use this variable.
RESPONSE_BODY # This variable holds the data for the response body, but only when response body buffering is enabled.
SecRule RESPONSE_BODY &quot;ODBC Error Code&quot; &quot;phase:4,id:54,t:none&quot; RESPONSE_CONTENT_LENGTH # Response body length in bytes. Can be available starting with phase 3, but it does not have to be (as the length of response body is not always known in advance). If the size is not known, this variable will contain a zero. If RESPONSE_CONTENT_LENGTH contains a zero in phase 5 that means the actual size of the response body was 0. The value of this variable can change between phases if the body is modified. For example, in embedded mode, mod_deflate can compress the response body between phases 4 and 5.
RESPONSE_CONTENT_TYPE # Response content type. Available only starting with phase 3. The value available in this variable is taken directly from the internal structures of Apache, which means that it may contain the information that is not yet available in response headers. In embedded deployments, you should always refer to this variable, rather than to RESPONSE_HEADERS:Content-Type.
RESPONSE_HEADERS # This variable refers to response headers, in the same way as REQUEST_HEADERS does to request headers.
SecRule RESPONSE_HEADERS:X-Cache &quot;MISS&quot; &quot;id:55&quot; This variable may not have access to some headers when running in embedded mode. Headers such as Server, Date, Connection, and Content-Type could be added just prior to sending the data to the client. This data should be available in phase 5 or when deployed in proxy mode.
RESPONSE_HEADERS_NAMES # This variable is a collection of the response header names.
SecRule RESPONSE_HEADERS_NAMES &quot;Set-Cookie&quot; &quot;phase:3,id:56,t:none&quot; The same limitations apply as the ones discussed in RESPONSE_HEADERS.
RESPONSE_PROTOCOL # This variable holds the HTTP response protocol information.
SecRule RESPONSE_PROTOCOL &quot;^HTTP\\/0\\.9&quot; &quot;phase:3,id:57,t:none&quot; RESPONSE_STATUS # This variable holds the HTTP response status code:
SecRule RESPONSE_STATUS &quot;^[45]&quot; &quot;phase:3,id:58,t:none&quot; This variable may not work as expected, as some implementations might change the status before releasing the output buffers.
RULE # This is a special collection that provides access to the id, rev, severity, logdata, and msg fields of the rule that triggered the action. It can be used to refer to only the same rule in which it resides.
SecRule &amp;REQUEST_HEADERS:Host &quot;@eq 0&quot; &quot;log,deny,id:59,setvar:tx.varname=%{RULE.id}&quot; SERVER_ADDR # This variable contains the IP address of the server.
SecRule SERVER_ADDR &quot;@ipMatch 192.168.1.100&quot; &quot;id:67&quot; SERVER_NAME # This variable contains the transaction’s hostname or IP address, taken from the request itself (which means that, in principle, it should not be trusted).
SecRule SERVER_NAME &quot;hostname\\.com$&quot; &quot;id:68&quot; SERVER_PORT # This variable contains the local port that the web server (or reverse proxy) is listening on.
SecRule SERVER_PORT &quot;^80$&quot; &quot;id:69&quot; SESSION # This variable is a collection that contains session information. It becomes available only after setsid is executed.
The following example shows how to initialize SESSION using setsid, how to use setvar to increase the SESSION.score values, how to set the SESSION.blocked variable, and finally, how to deny the connection based on the SESSION:blocked value:
# Initialize session storage SecRule REQUEST_COOKIES:PHPSESSID !^$ &quot;phase:2,id:70,nolog,pass,setsid:%{REQUEST_COOKIES.PHPSESSID}&quot; # Increment session score on attack SecRule REQUEST_URI &quot;^/cgi-bin/finger$&quot; &quot;phase:2,id:71,t:none,t:lowercase,t:normalizePath,pass,setvar:SESSION.score=+10&quot; # Detect too many attacks in a session SecRule SESSION:score &quot;@gt 50&quot; &quot;phase:2,id:72,pass,setvar:SESSION.blocked=1&quot; # Enforce session block SecRule SESSION:blocked &quot;@eq 1&quot; &quot;phase:2,id:73,deny,status:403&quot; SESSIONID # This variable contains the value set with setsid. See SESSION (above) for a complete example.
STATUS_LINE # This variable holds the full status line sent by the server (including the request method and HTTP version information).
# Generate an alert when the application generates 500 errors. SecRule STATUS_LINE &quot;@contains 500&quot; &quot;phase:3,id:49,log,pass,logdata:'Application error detected!,t:none&quot; Version: 2.x Supported on Coraza: TBI
TIME # This variable holds a formatted string representing the time (hour:minute:second).
SecRule TIME &quot;^(([1](8|9))|([2](0|1|2|3))):\\d{2}:\\d{2}$&quot; &quot;id:74&quot; TIME_DAY # This variable holds the current date (1–31). The following rule triggers on a transaction that’s happening anytime between the 10th and 20th in a month:
SecRule TIME_DAY &quot;^(([1](0|1|2|3|4|5|6|7|8|9))|20)$&quot; &quot;id:75&quot; TIME_EPOCH # This variable holds the time in seconds since 1970.
TIME_HOUR # This variable holds the current hour value (0–23). The following rule triggers when a request is made “off hours”:
SecRule TIME_HOUR &quot;^(0|1|2|3|4|5|6|[1](8|9)|[2](0|1|2|3))$&quot; &quot;id:76&quot; TIME_MIN # This variable holds the current minute value (0–59). The following rule triggers during the last half hour of every hour:
SecRule TIME_MIN &quot;^(3|4|5)&quot; &quot;id:77&quot; TIME_MON # This variable holds the current month value (0–11). The following rule matches if the month is either November (value 10) or December (value 11):
SecRule TIME_MON &quot;^1&quot; &quot;id:78&quot; TIME_SEC # This variable holds the current second value (0–59).
Supported: TBI
SecRule TIME_SEC &quot;@gt 30&quot; &quot;id:79&quot; TIME_WDAY # This variable holds the current weekday value (0–6). The following rule triggers only on Satur- day and Sunday:
Supported: TBI
SecRule TIME_WDAY &quot;^(0|6)$&quot; &quot;id:80&quot; TIME_YEAR # This variable holds the current four-digit year value.
Supported: TBI
SecRule TIME_YEAR &quot;^2006$&quot; &quot;id:81&quot; TX # This is the transient transaction collection, which is used to store pieces of data, create a transaction anomaly score, and so on. The variables placed into this collection are available only until the transaction is complete.
# Increment transaction attack score on attack SecRule ARGS attack &quot;phase:2,id:82,nolog,pass,setvar:TX.score=+5&quot; # Block the transactions whose scores are too high SecRule TX:SCORE &quot;@gt 20&quot; &quot;phase:2,id:83,log,deny&quot; Some variable names in the TX collection are reserved and cannot be used:
TX:0: the matching value when using the @rx or @pm operator with the capture action TX:1-TX:9: the captured subexpression value when using the @rx operator with capturing parens and the capture action UNIQUE_ID # This variable holds the unique id for the transaction.
URLENCODED_ERROR # This variable is created when an invalid URL encoding is encountered during the parsing of a query string (on every request) or during the parsing of an application/x-www-form-urlencoded request body (only on the requests that use the URLENCODED request body processor).
USERID # This variable contains the value set with setuid.
Supported: TBI
# Initialize user tracking SecAction &quot;nolog,id:84,pass,setuid:%{REMOTE_USER}&quot; # Is the current user the administrator? SecRule USERID &quot;admin&quot; &quot;id:85&quot; WEBAPPID # This variable contains the current application name, which is set in configuration using SecWebAppId.
Supported: TBI
XML # Special collection used to interact with the XML parser. It must contain a valid XPath expression, which will then be evaluated against a previously parsed XML DOM tree.
SecDefaultAction log,deny,status:403,phase:2,id:90 SecRule REQUEST_HEADERS:Content-Type ^text/xml$ &quot;phase:1,id:87,t:lowercase,nolog,pass,ctl:requestBodyProcessor=XML&quot; SecRule REQBODY_PROCESSOR &quot;!^XML$&quot; skipAfter:12345,id:88 It would match against payload such as this one:
&lt;employees&gt; &lt;employee&gt; &lt;name&gt;Fred Jones&lt;/name&gt; &lt;address location=&quot;home&quot;&gt; &lt;street&gt;900 Aurora Ave.&lt;/street&gt; &lt;city&gt;Seattle&lt;/city&gt; &lt;state&gt;WA&lt;/state&gt; &lt;zip&gt;98115&lt;/zip&gt; &lt;/address&gt; &lt;address location=&quot;work&quot;&gt; &lt;street&gt;2011 152nd Avenue NE&lt;/street&gt; &lt;city&gt;Redmond&lt;/city&gt; &lt;state&gt;WA&lt;/state&gt; &lt;zip&gt;98052&lt;/zip&gt; &lt;/address&gt; &lt;phone location=&quot;work&quot;&gt;(425)555-5665&lt;/phone&gt; &lt;phone location=&quot;home&quot;&gt;(206)555-5555&lt;/phone&gt; &lt;phone location=&quot;mobile&quot;&gt;(206)555-4321&lt;/phone&gt; &lt;/employee&gt; &lt;/employees&gt; `}),e.add({id:8,href:"/docs/tutorials/quick-start/",title:"Quick Start",description:"One page summary of how to start a new Coraza WAF project.",content:`If you are not looking to use Coraza WAF as a library and you want a working WAF implementation or integration, check the integrations page.
Requirements # Golang 1.18+ Add Coraza to your go project # go install github.com/corazawaf/coraza/v3@latest Create a WAF instance # WAF instances are the main container for settings and rules which are inherited by transactions that will process requests, responses and logging. A WAF instance can be created like this:
package main import ( &quot;github.com/corazawaf/coraza/v3&quot; ) func initCoraza(){ cfg := coraza.NewWafConfig() waf, err := coraza.NewWaf(cfg) } Adding rules to a Waf Instance # Seclang rules syntax is used to create Coraza rules, which will be evaluated by transactions and apply disruptive actions like deny(403) or just log the event. See the Seclang references.
Rules can be added using the coraza.NewWAFConfig().WithDirectives() method:
package main import ( &quot;github.com/corazawaf/coraza/v3&quot; ) func createWAF() coraza.WAF { waf, err := coraza.NewWAF(coraza.NewWAFConfig().WithDirectives(\`SecAction &quot;id:1,phase:1,deny:403,log&quot;\`)) if err != nil { panic(err) } return waf } Creating a transaction # Transactions are created for each http request, they are concurrent-safe and they handle Phases to evaluate rules and generate audits and interruptions. A transaction can be created using waf.NewTransaction(). ID of the transaction can also be specified using waf.NewTransactionWithID(id).
Handling an interruption # Interruptions are created by Transactions to tell the web server or application what action is required based on the rules of action. Interruptions can be retrieved using tx.Interruption(), a nil Interruption means there is no action needed (pass) and a non-nil interruption means the web server must do something like denying the request. For example:
//... tx := waf.NewTransaction() // Add some variables and process some phases if it := tx.Interruption();it != nil { switch it.Action() { case &quot;deny&quot;: rw.WriteStatus(it.Status()) rw.Write([]byte(&quot;Some error message&quot;)) return } } Handling a request # There are two ways to handle a Request, you can manually process each phase for the request or you can send a http.Request to Coraza.
To process an http.Request struct you must use the tx.ProcessRequest(req) helper. ProcessRequest will evaluate phases 1 and 2, and will stop the execution flow if the transaction was disrupted. Important: req.Body will be read replaced with a new pointer, pointing to a buffer or file created by Coraza.
To manually process a request we must run 5 functions in the following order:
ProcessConnection: Creates variables with connection information like IP addresses and ports. ProcessUri: Creates variables from strings extracted from the Request Line, these are method, url and protocol. AddRequestHeader: Must be run for each HTTP header, it will create headers, variables and cookies. ProcessRequestHeaders: Evaluates phase 1 rules with all the variables felt before. This function is disruptive. RequestBodyBuffer.Write: Writes to the request body buffer, you can just io.Copy(tx.RequestBodyBuffer, someReader) ProcessRequestBody: Evaluates phase 2 rules with the REQUEST_BODY and POST variables. There are other cases like MULTIPART, JSON and XML tx := waf.NewTransaction() // 127.0.0.1:55555 -&gt; 127.0.0.1:80 tx.ProcessConnection(&quot;127.0.0.1&quot;, 55555, &quot;127.0.0.1&quot;, 80) // Request URI was /some-url?with=args tx.ProcessURI(&quot;/some-url?with=args&quot;) // We add some headers tx.AddRequestHeader(&quot;Host&quot;, &quot;somehost.com&quot;) tx.AddRequestHeader(&quot;Cookie&quot;, &quot;some-cookie=with-value&quot;) // Content-Type is important to tell coraza which BodyProcessor must be used tx.AddRequestHeader(&quot;Content-Type&quot;, &quot;application/x-www-form-urlencoded&quot;) // We process phase 1 (Request) if it := tx.ProcessRequestHeaders();it != nil { return processInterruption(it) } // We add urlencoded POST data tx.RequestBodyBuffer.Write([]byte(&quot;somepost=data&amp;with=paramenters&quot;)) // We process phase 2 (Request Body) if it := tx.ProcessRequestBody();it != nil { return processInterruption(it) } Handling a response # Responses are harder to handle, that&rsquo;s why there is no helper to do that. Many integrations require you to create &ldquo;body interceptors&rdquo; or other kinds of functions.
There is a special helper, IsProcessableResponseBody that returns true if the request can be intercepted by Coraza. A body interceptor must be created to buffer the body into the transaction, call ProcessResponseBody then send this buffer back to the server.
Handling logging # Logging is a mandatory phase that has to be processed even if the transaction was disrupted. The best way to force calling ProcessLogging() is to use defer, for example:
//... tx := waf.NewTransaction() defer tx.ProcessLogging() //Process phases Handling full requests and response # Coraza http package contains a middleware that can be used to handle a full request and response. This middleware can be used with any web framework that supports http.Handler.
package main import ( txhttp &quot;github.com/corazawaf/coraza/v3/http&quot; ) func main() { waf, _ := coraza.NewWAF(coraza.NewWAFConfig()) http.Handle(&quot;/&quot;, txhttp.WrapHandler(waf, http.HandlerFunc(exampleHandler))) fmt.Println(&quot;Server is running. Listening port: 8090&quot;) log.Fatal(http.ListenAndServe(&quot;:8090&quot;, nil)) } `}),e.add({id:9,href:"/docs/tutorials/coreruleset/",title:"OWASP Core Ruleset",description:"OWASP Core Ruleset is the most robust open source WAF rule set available in the internet, compatible with Coraza",content:`Installation # Core Ruleset can be installed by importing each required file in the following order:
wget https://raw.githubusercontent.com/corazawaf/coraza/v3/dev/coraza.conf-recommended -O coraza.conf git clone https://github.com/coreruleset/coreruleset coraza.conf coreruleset/crs-setup.conf.example coreruleset/rules/*.conf For example:
func initCoraza(){ cfg := coraza.NewWafConfig() .WithDirectivesFromFile(&quot;coraza.conf&quot;) .WithDirectivesFromFile(&quot;coreruleset/crs-setup.conf.example&quot;) .WithDirectivesFromFile(&quot;coreruleset/rules/*.conf&quot;) waf, err := coraza.NewWaf(cfg) if err != nil { panic(err) } } Configuration # Please check https://coreruleset.org/installation/ for configuration examples.
`}),e.add({id:10,href:"/docs/reference/internals/",title:"Internals",description:`WAF Engine # Waf is the main interface used to store settings, rules and create transactions, most directives will set variables for Waf instances. A coraza implementation might have unlimited Waf instances and each Waf might process unlimited transactions.
Transactions # Transactions are an instance of an url call for a Waf instance, transactions are created with wafinstance.NewTransaction(). Transactions hold collections and configurations that may be updated using rules.
Macro Expansion # Macro expansions are a function available for transactions, a macro expansion will compile a string and provide variables data to the current context.`,content:`WAF Engine # Waf is the main interface used to store settings, rules and create transactions, most directives will set variables for Waf instances. A coraza implementation might have unlimited Waf instances and each Waf might process unlimited transactions.
Transactions # Transactions are an instance of an url call for a Waf instance, transactions are created with wafinstance.NewTransaction(). Transactions hold collections and configurations that may be updated using rules.
Macro Expansion # Macro expansions are a function available for transactions, a macro expansion will compile a string and provide variables data to the current context. Macro expansion is performed by running a regular expression that will find %{request_headers.test} and replace the value using:
v1 := tx.GetCollection(variables.RequestHeaders).GetFirstString(&quot;test&quot;) v2 := tx.MacroExpansion(&quot;%{request_headers.test}&quot;) v1 == v2 // true Rules # Rules are triggered by RuleGroup.Evaluate(phase) based on the phase number, rules with phase 0 or rule.AlwaysMatch will always run. Rules that always run are SecMarkers or SecActions which means rules without operators.
Rules marked with a SecMarker will be used to control execution flow and tell the transaction to stop skipping rules from skipAfter.
Different from ModSecurity, each rule is a unique struct in Coraza and is shared between each transaction of the same Waf instance, which means a transaction should never update any field from a Rule and all variable fields must be stored within the transaction instead.
Once a rule is triggered, it will follow the following flow:
Skip if this rule is removed for the current transaction Fill the RULE variable data which contains fields from the current rule Apply removed targets for this transaction Compile each variable, normal, counters, negations and &ldquo;always match&rdquo; Apply transformations for each variable, match or multi-match Execute the current operator for each variable Continue if there was any match Evaluate all non-disruptive actions Evaluate chains recursively Log data if requested Evaluate disruptive and flow rules The return of this function contains each MatchData, which will tell the transaction where exactly the data was matched, Variable, Key and Value. Maybe we should add if it was negation in the future, SecActions and SecMarkers will return a placeholder.
Important: Rules may update a Transaction behaviour but not a Waf instance.
Operators # Operators are stored in github.com/corazawaf/coraza/tree/v3/dev/internal/operators and contain an initializer and an evaluation function. Initializers are used to apply arguments during compilation, for example, &quot;@rx /\\d+/&quot; will run op.Init(&quot;/\\\\d+&quot;). op.Evaluate(tx, &quot;args&quot;) is applied for each compiled variable and will return if the condition matches. Operators uses Transaction to create logs, capture fields and access additional variables from the transaction.
Note: Operators must be concurrent-friendly
Actions # Actions are stored in github.com/coraza-waf/coraza/v2/actions and contains an initializer and an evaluation function, the initializers are evaluated during compilation, for example, id:4 will run act.Init(&quot;4&quot;). Depending on the Type() of each action, it will run on different phases.
Non-Disruptive: Do something, but that something does not and cannot affect the rule processing flow. Setting a variable, or changing its value is an example of a non-disruptive action. Non-disruptive action can appear in any rule, including each rule belonging to a chain. Non-disruptive rules are evaluated after the rule matches some data. Flow actions: These actions affect the rule flow (for example skip or skipAfter). Flow actions are evaluated after the rule successfully matched and will only run for the parent rule of a chain. Meta-data actions: Meta-data actions are used to provide more information about rules. Examples include id, rev, severity and msg. Meta-data rules are only initialized, they won&rsquo;t be evaluated, act.Evaluate(...) will never be called. Transformations # Transformations are simple functions to transform some string into another string. There is a special struct called transactions.Tools, that contains useful &ldquo;tools&rdquo; required for some transformations, which are UnicodeMapping for utf8ToUnicode and waf.Logger to debug transformations. More fields may be added in the future.
Note: Transformations are evaluated thousands of times per transaction and they must be SUPER FAST.
Rule Groups # Rule Groups are like Modsecurity Rules, it&rsquo;s just a container for rules that will return the list of rules concurrent-safe and will evaluate rules based on the requested phase.
Collections # Collections are used by Coraza to store Variables, all Variables are treated as the same type, even if they map values, they are single values or arrays.
Collections are stored as a slice []*Collection, each index is assigned based on it&rsquo;s constant name provided by variables.go. For example, if you want to get a collection you might use tx.GetCollection(variables.Files). If you want to transform a named variable to it&rsquo;s constant you may use:
b, _ := variables.ParseVariable(&quot;FILES&quot;) tx.GetCollection(b) In the following example we are showing the output for tx.GetCollection(variables.RequestHeaders).Data().
{ &quot;user-agent&quot;: [ &quot;some user agent string&quot; ] } Some helpers may be used for this cases, like tx.GetCollection(variables.RequestHeaders).GetFirstString(&quot;&quot;).
Variables are compiled in runtime in order to support Regex(precompiled) and XML, the function tx.GetField(variable). Using RuleVariable.Exceptions and []exceptions might seem redundant but both are different, the list of exception is complemented from the rule. In case of Regex, GetField will use RuleVariable.Regex to match data instead of RuleVariable.Key.
Note: Collections are not concurrent-safe, don&rsquo;t share transactions between routines.
Phases # Phases are used by RuleGroup to filter between execution phases on HTTP/1.1 and HTTP/1.0.
Phase 1: Request Headers
This phase process theorically consists in three phases:
Connection (tx.ProcessConnection()): Request address and port Request line (tx.ProcessURI()): Request URL, does not include GET arguments Request headers (tx.ProcessRequestHeaders()) Will evaluate phase 1 Phase 2: Request Body
This phase only runs when RequestBodyAcces is On, otherwise we will skip to phase 3. This phase will do one of the following:
Reject transaction if the request body is too long and RequestBodyLimitAction is set to Reject If URLENCODED: set POST arguments and request_Body If MULTIPART: Parse files and set FILES variables If JSON: Not implemented yet If none of the above was met and ForceRequestBodyVariable is set to true, URLENCODED will be forced See Body Handling for more info.
Phase 3: Response Headers
Phase 4: Response Body
Phase 5: Logging
This is a special phase, it will always run but it must be handled by the client. For example, if there is any error reported by Coraza, the client must at least implement a defer tx.ProcessLogging(). This phase will close handlers, save persistent collections and write audit loggers, in order to write the audit loggers the following conditions must be met:
Transaction was marked with auditlog action There must be at least one audit logger (SecAuditLog) AuditEngine must be On or RelevantOnly If AuditEngine was set to RelevantOnly the response status must match AuditLogRelevantStatus Body handling # BodyBuffer is a struct that will manage the request or response buffer and store the data to temprary files if required. BodyBuffer will apply a few rules to decide whether to buffer the data in memory or write a temporary file, it will also return a Reader to the memory buffer or the temporary file created. Temporary files must be deleted by tx.ProccessLoging.
Persistent Collections # Not working yet.
The tx.ProcessRequest(req) helper # `}),e.add({id:11,href:"/docs/tutorials/using-plugins/",title:"Using Plugins",description:"Plugins can extend most Coraza functionalities like, audit logging, geo ip, operators, actions, transformations and body processors.",content:`Plugins are imported by calling the respective helpers:
plugins.RegisterOperator(...) plugins.RegisterAction(...) plugins.RegisterBodyProcessor(...) plugins.RegisterTransformation(...) Most plugins will register themselves automatically, but some will require you to call the respective helper.
Self-registering plugins will use init() to call the respective registration helper, and they can be imported like this:
package main include( &quot;github.com/corazawaf/coraza/v3&quot; _ &quot;github.com/someorg/my-awesome-plugin ) `}),e.add({id:12,href:"/docs/tutorials/upgrade/",title:"Upgrade to v3 🆕",description:"This tutorial details the steps requiring to upgrade your Coraza v2 application to Coraza v3.",content:`In this guide, we will outline the necessary steps to upgrade from Coraza v2 to v3. Coraza v3 brings improvements in performance, usability, and extensibility, making it an essential update for users of the library. Follow these steps to ensure a smooth transition.
1. Update your dependencies # First, update your project&rsquo;s dependencies to use Coraza v3:
go install -u github.com/corazawaf/coraza/v3 Make sure to replace any import statements in your project with the new import path:
import ( &quot;github.com/corazawaf/coraza/v3&quot; ) 2. Initialize the WAF # In v3, you no longer need to create a separate seclang.Parser. Instead, you can create and configure the WAF using the coraza.NewWAF() function and coraza.NewWAFConfig() method:
waf, err := coraza.NewWAF(coraza.NewWAFConfig().WithDirectives(\`SecRule REMOTE_ADDR &quot;@rx .*&quot; &quot;id:1,phase:1,deny,status:403&quot;\`)) In v3, the Transaction struct has been replaced with an interface called coraza.Transaction. When creating a new transaction, use the waf.NewTransaction() method:
tx := waf.NewTransaction() The Clean() method has been renamed in v3. Instead, use the Close() method to release resources associated with the transaction:
defer func() { tx.ProcessLogging() tx.Close() }() 4. Process phases # The transaction processing methods in v3 remain mostly the same, with minor changes in naming:
There are new helpers to add body buffer SetHostname was added AddArguments was separated into AddPostArgument, AddGetArgument, AddPathArgument 5. Plugins # The plugin interfaces have moved into the experimental package. See the plugin documentation.
`}),e.add({id:13,href:"/docs/reference/benchmarks/",title:"Benchmarks",description:"Tests description # Tests are performed using OWASP Core Ruleset v4 and go benchmarks. The benchmark tool supports coraza v2, v3 and modsecurity. Modsecurity is executed using CGO. There are currently 4 test-cases and 7 variations: JSON request: 1kb and 100kb payload URLENCODED request: 1kb and 100kb payload Multipart file upload: 1kb and 100kb payload GET request: no body Results # Machine specs: Apple M1 Pro (10 cores, 16 GB RAM)",content:`Tests description # Tests are performed using OWASP Core Ruleset v4 and go benchmarks. The benchmark tool supports coraza v2, v3 and modsecurity. Modsecurity is executed using CGO. There are currently 4 test-cases and 7 variations: JSON request: 1kb and 100kb payload URLENCODED request: 1kb and 100kb payload Multipart file upload: 1kb and 100kb payload GET request: no body Results # Machine specs: Apple M1 Pro (10 cores, 16 GB RAM)
Values are requests analyzed per second. The higher the value, the better results.
Test Coraza v2 Coraza v3 Modsecurity Simple JSON Request 639 903 1011 Giant JSON Request 603 908 847 Multipart Request 606 817 976 Giant Multipart Request 573 781 958 Simple GET Request 654 955 1135 Simple URLENCODED Request 624 892 842 Giant URLENCODED Request 632 871 840 Test Versions:
Coraza v3: v3.0.0-dev (no tag) Coraza v2: v2.0.1 Modsecurity v3: v3.0.7 Run your own benchmarks # Using golang # # compile modsecurity: https://github.com/SpiderLabs/ModSecurity/wiki/Compilation-recipes-for-v3.x git clone https://github.com/jptosso/coraza-benchmark cd coraza-benchmark go test -bench=. ./... Using Docker # docker run jptosso/coraza-benchmark:latest `}),e.add({id:14,href:"/docs/reference/body-processing/",title:"Body Processing",description:`BodyBuffer # BodyBuffer is used to effectively handle large bodies. Coraza has to buffer the body in order to make reliable blocking possible. Future versions might implement a more efficient solution.
BodyBuffer.Reader is a io.Reader that reads from either a memory buffer or a file. Using files is disabled for tinygo.
Important: Copying a Reader to BodyBuffer will most likely flush the original reader. In most cases you will have to keep two copies of the reader, one for coraza, and one for your application.`,content:`BodyBuffer # BodyBuffer is used to effectively handle large bodies. Coraza has to buffer the body in order to make reliable blocking possible. Future versions might implement a more efficient solution.
BodyBuffer.Reader is a io.Reader that reads from either a memory buffer or a file. Using files is disabled for tinygo.
Important: Copying a Reader to BodyBuffer will most likely flush the original reader. In most cases you will have to keep two copies of the reader, one for coraza, and one for your application. You can simply replace your reader pointer with the BodyBuffer reader pointer.
Body Processors # Body processors are designed to handle requests and responses in the same context. Most processors can handle either a request or a response, but there are cases of body processors like JSON, that can handle request and response in different context. Request-Response correlation is the responsibility of the processor, and the current use-case is GraphQL.
Body Processor Request Response Correlation Tinygo support URLEncoded Yes No No Yes XML (Partial Support) Yes Yes No No Multipart Yes No No Yes JSON Yes Yes No Yes GraphQL TBD TBD Yes TBD `}),e.add({id:15,href:"/docs/reference/extending/",title:"Extending",description:"Easily extend Coraza with your own Operators, Actions, Audit Loggers and Persistence engines.",content:` Rule Operators: Create rule operators like @even to detect even numbers Rule Transformations: Create rule transformations like t:rot13 to encode your values in ROT13 Rule Actions: Create rule actions like challenge to redirect a malicious request to some bot detection system The plugin interface provides three functions to extend rule operators, transformations and actions. Each one of them must match it&rsquo;s proper type or interface and be registered using the plugins package.
Operators: type PluginOperatorWrapper() types.RuleOperator Actions: type PluginOperatorWrapper() types.RuleAction Transformations: type Transformation = func(input string, tools *transformations.Tools) string After defining the plugins, we must register them using the plugins.Register... function inside the init function func init(){}.
Operators: operators.RegisterPlugin(operator PluginOperatorWrapper) Actions: actions.RegisterPlugin(action PluginActionWrapper) Transformations: transformations.RegisterPlugin(transformation transformations.Transformation) Important: Some integrations like Traefik does not support plugins, because we cannot control how the integration is compiled by Pilot.
Installing a plugin # Plugin model is based on Caddy plugins system, they must be compiled within the project just by importing them like this:
import( &quot;github.com/corazawaf/coraza/v3&quot; _ &quot;github.com/someone/somecorazaplugin&quot; ) Creating Rule Actions # Rule Action interface # type RuleAction interface { // Initializes an action, will be done during compilation Init(*Rule, string) error // Evaluate will be done during rule evaluation Evaluate(*Rule, *Transaction) // Type will return the rule type, it's used by Evaluate // to choose when to evaluate each action Type() types.RuleActionType } Action types # Each action can have one type that defines in which part of the rule lifetime it will be evaluated.
ACTION_TYPE_DISRUPTIVE: Cause Coraza to do something. In many cases something means block transaction, but not in all. For example, the allow action is classified as a disruptive action, but it does the opposite of blocking. There can only be one disruptive action per rule (if there are multiple disruptive actions present, or inherited, only the last one will take effect), or rule chain (in a chain, a disruptive action can only appear in the first rule). ACTION_TYPE_NONDISRUPTIVE: Do something, but that something does not and cannot affect the rule processing flow. Setting a variable, or changing its value is an example of a non-disruptive action. Non-disruptive action can appear in any rule, including each rule belonging to a chain. ACTION_TYPE_FLOW: These actions affect the rule flow (for example skip or skipAfter). ACTION_TYPE_METADATA: Meta-data actions are used to provide more information about rules. Examples include id, rev, severity and msg. ACTION_TYPE_DATA: - Not really actions, these are mere containers that hold data used by other actions. For example, the status action holds the status that will be used for blocking (if it takes place). Creating a custom action # type id15 struct{} // Initializes an action, will be done during compilation func (id15) Init(rule *coraza.Rule, _ string) error { rule.Id = 15 return nil } // Evaluate will be done during rule evaluation func (id15) Evaluate(_ *coraza.Rule, _ *coraza.Transaction) {} // ACTION_TYPE_DATA will be only evaluated while compiling the rule, Evaluate won't be called func (id15) Type() int { return coraza.ACTION_TYPE_DATA } // Tripwire to match coraza.RuleAction type var _ coraza.RuleAction = &amp;id15{} Transforming the action to plugin # Once the action is created, it must be wrapper inside a type PluginActionWrapper = func() types.RuleAction in order to be registered.
import( &quot;github.com/corazawaf/coraza/v3/actions&quot; &quot;github.com/corazawaf/coraza/v3/types&quot; ) func init() { actions.RegisterPlugin(&quot;id15&quot;, func() types.RuleAction { return &amp;id15{} }) } After properly importing the plugin, you may be able to create rules with id15 action, for example:
SecAction &quot;id15, nolog, pass&quot; Creating Rule Transformations # Transformations are the easiest components to extend, each transformation implements the transformations.Transformation type and can be registered directly using plugins.RegisterPlugin(transformation transformations.Transformation).
The *Tools struct is designed to add additional functionalities like logging and unicode mapping.
Transformation Type # type Transformation = func(input string, tools *Tools) string Example # import ( &quot;github.com/corazawaf/coraza/v3/transformations&quot; &quot;strings&quot; ) func transformationToLowercase(input string) (string, error) { return strings.ToLower(input) } func init() { transformations.RegisterPlugin(&quot;tolower2&quot;, transformationToLowercase) } Creating Rule Operators # Rule Operator interface # // Operator interface is used to define rule @operators type Operator interface { // Init is used during compilation to setup and cache // the operator Init(string) error // Evaluate is used during the rule evaluation, // it returns true if the operator succeeded against // the input data for the transaction Evaluate(*Transaction, string) bool } Creating a custom operator # type opEven struct{} func (opEven) Init(_ string) error { return nil } func (opEven) Evaluate(_ *coraza.Transaction, input string) bool { i, _ := strconv.Atoi(input) return i%2 == 0 } //Tripwire var _ coraza.Operator = &amp;opEven{} Transforming the operator to plugin # Once the operator is created, it must be wrapper inside a type PluginOperatorWrapper = func() coraza.Operator in order to be registered.
import( &quot;github.com/corazawaf/coraza/v3/operators&quot; &quot;github.com/corazawaf/coraza/v3/types&quot; ) func init() { operators.RegisterPlugin(&quot;even&quot;, func() types.Operator { return &amp;opEven{} }) } After properly importing the plugin, you may be able to create rules with even operator, for example:
SecRule ARGS:id &quot;@even&quot; &quot;id:1, nolog, pass&quot; Testing your plugin # There are no special helpers to test plugins but you may use the seclang compiler to achieve this, for example, if we want to test that the tolower2 transformation works we must write the following test:
import( &quot;github.com/jptosso/coraza-waf/v2/seclang&quot; &quot;github.com/jptosso/coraza-waf/v2/types&quot; &quot;github.com/jptosso/coraza-waf/v2/transformations&quot; &quot;strings&quot; &quot;testing&quot; ) func TestToLower2(t *testing.T){ waf := coraza.NewWaf() parser, _ := seclang.NewParser(waf) if err := parser.FromString(\`SecRule ARGS:id &quot;lowercase&quot; &quot;id:1, t:tolower2&quot;\`); err != nil{ t.Error(err) } str := &quot;TOLowEr&quot; if strings.ToLower(str) != transformationToLowercase(str) { t.Error(&quot;Transformation tolower2 failed&quot;) } } Adding plugins to Coraza Plugin Repository # This feature will be available soon, in the meantime, you can edit this site and add plugins to plugins.html.
The site will update it&rsquo;s database every 60 minutes, searching for projects with the coraza-plugin topic.
If the site fails to add the plugin to the database, it will create an issue with the details.
Requirements # The project must be public in github. The project must have the coraza-plugin keyword. The project must have a valid .coraza.yml file in the root path. The project must have a valid go.mod file .coraza.yml # This file will be used in the future by the Coraza Public Plugin Repository, it&rsquo;s not required by the plugin itself.
.coraza.yml must be placed in the root directory of your repository and it must contain the following valid yaml structure:
# We only accept alphanumeric and -. ([\\w-]) name: some-plugin author: Your Full name or whatever you want to show repository: github.com/path/to-project # Coraza Plugin repository will only accept projects with apache2, MIT and BSD licenses, # we might accept more in the future license: apache2 description: Short description to display in plugins.coraza.io # We are using Ruby Gem version syntax: https://guides.rubygems.org/patterns/#pessimistic-version-constraint # The min supported Coraza version, each item represents an AND operator version: - &quot;&gt;= v1.1&quot; - &quot;&lt; v2&quot; # or ~&gt; that is identical to the previous statements - &quot;~&gt; v1.1&quot; tags: - Add some tags - For filtering defs: - name: even type: action|operator|transformation description: Will match if the number is even `}),e.add({id:16,href:"/docs/reference/",title:"Reference",description:"Coraza WAF API References.",content:""}),e.add({id:17,href:"/docs/tutorials/",title:"Tutorials",description:"Coraza WAF tutorials.",content:""}),e.add({id:18,href:"/docs/",title:"Use Cases",description:"OWASP Coraza WAF use cases.",content:""}),e.add({id:19,href:"/docs/seclang/",title:"Seclang",description:"Coraza WAF Docs.",content:""}),search.addEventListener("input",t,!0);function t(){const s=5;var n=this.value,o=e.search(n,{limit:s,enrich:!0});const t=new Map;for(const e of o.flatMap(e=>e.result)){if(t.has(e.doc.href))continue;t.set(e.doc.href,e.doc)}if(suggestions.innerHTML="",suggestions.classList.remove("d-none"),t.size===0&&n){const e=document.createElement("div");e.innerHTML=`No results for "<strong>${n}</strong>"`,e.classList.add("suggestion__no-results"),suggestions.appendChild(e);return}for(const[r,a]of t){const n=document.createElement("div");suggestions.appendChild(n);const e=document.createElement("a");e.href=r,n.appendChild(e);const o=document.createElement("span");o.textContent=a.title,o.classList.add("suggestion__title"),e.appendChild(o);const i=document.createElement("span");if(i.textContent=a.description,i.classList.add("suggestion__description"),e.appendChild(i),suggestions.appendChild(n),suggestions.childElementCount==s)break}}})()