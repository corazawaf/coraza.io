<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Directives on</title><link>https://coraza.io/docs/seclang/directives/</link><description>Recent content in Directives on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:57 +0000</lastBuildDate><atom:link href="https://coraza.io/docs/seclang/directives/index.xml" rel="self" type="application/rss+xml"/><item><title>Include</title><link>https://coraza.io/docs/seclang/directives/include/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/include/</guid><description>Include loads a file or a list of files from the filesystem using golang Glob syntax.
Quoting golang documentation:
The syntax of patterns is the same as in Match. The pattern may describe hierarchical names such as /usr/*/bin/ed (assuming the Separator is &amp;lsquo;/&amp;rsquo;).
Glob ignores file system errors such as I/O errors reading directories. The only possible returned error is ErrBadPattern, when pattern is malformed.`</description></item><item><title>SecAction</title><link>https://coraza.io/docs/seclang/directives/secaction/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/secaction/</guid><description>This directive is commonly used to set variables and initialize persistent collections using the initcol action. For example:
SecAction &amp;quot;nolog,phase:1,initcol:RESOURCE=%{REQUEST_FILENAME}&amp;quot;</description></item><item><title>SecArgumentSeparator</title><link>https://coraza.io/docs/seclang/directives/secargumentseparator/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/secargumentseparator/</guid><description>This directive is needed if a backend web application is using a nonstandard argument separator. Applications are sometimes (very rarely) written to use a semicolon separator. You should not change the default setting unless you establish that the application you are working with requires a different separator. If this directive is not set properly for each web application, then Coraza will not be able to parse the arguments appropriately and the effectiveness of the rule matching will be significantly decreased.</description></item><item><title>SecAuditEngine</title><link>https://coraza.io/docs/seclang/directives/secauditengine/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/secauditengine/</guid><description>The SecAuditEngine directive is used to configure the audit engine, which logs complete transactions. Coraza is currently able to log most, but not all transactions. Transactions involving errors (e.g., 400 and 404 transactions) use a different execution path, which Coraza does not support.
The possible values for the audit log engine are as follows:
On: log all transactions Off: do not log any transactions RelevantOnly: only the log transactions that have triggered a warning or an error, or have a status code that is considered to be relevant (as determined by the SecAuditLogRelevantStatus directive) Note : If you need to change the audit log engine configuration on a per-transaction basis (e.</description></item><item><title>SecAuditEngine</title><link>https://coraza.io/docs/seclang/directives/secauditlogparts/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/secauditlogparts/</guid><description>The format of the audit log format is documented in detail in the logging page.
Available audit log parts:
A: Audit log header (mandatory). B: Request headers. C: Request body (present only if the request body exists and Coraza is configured to intercept it. This would require SecRequestBodyAccess to be set to on). D: Reserved for intermediary response headers; not implemented yet. E: Intermediary response body (present only if Coraza is configured to intercept response bodies, and if the audit log engine is configured to record it.</description></item><item><title>SecAuditLog</title><link>https://coraza.io/docs/seclang/directives/secauditlog/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/secauditlog/</guid><description>ðŸ‘‰ Writing to programs using pipe (|) is not implemented yet. SecAuditLog &amp;quot;|/path/to/mlogc /path/to/mlogc.conf&amp;quot; Note : This audit log file is opened on startup when the server typically still runs as root. You should not allow non-root users to have write privileges for this file or for the directory.</description></item><item><title>SecAuditLogRelevantStatus</title><link>https://coraza.io/docs/seclang/directives/secauditlogrelevantstatus/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/secauditlogrelevantstatus/</guid><description>Example Usage: SecAuditLogRelevantStatus &amp;quot;^(?:5|40[1235])&amp;quot;
Dependencies/Notes: Must have SecAuditEngine set to RelevantOnly. Additionally, the auditlog action is present by default in rules, this will make the engine bypass the SecAuditLogRelevantStatus and send rule matches to the audit log regardless of status. You must specify noauditlog in the rules manually or set it in SecDefaultAction.
The main purpose of this directive is to allow you to configure audit logging for only the transactions that have the status code that matches the supplied regular expression.</description></item><item><title>SecDebugLog</title><link>https://coraza.io/docs/seclang/directives/secdebuglog/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/secdebuglog/</guid><description>Logs will be written to this file. Make sure the process user has write access to the directory.</description></item><item><title>SecDebugLogLevel</title><link>https://coraza.io/docs/seclang/directives/secdebugloglevel/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/secdebugloglevel/</guid><description>Depending on the implementation, errors ranging from 1 to 2 might be directly logged to the connector error log. For example, level 2 (error) logs will be written to caddy server error logs.
The possible values for the debug log level are:
0: Fatal 1: Panic 2: Error 3: Warning 4: details of how transactions are handled 5: log everything, including very detailed debugging information All levels over 5 will be considered as 5.</description></item><item><title>SecDefaultAction</title><link>https://coraza.io/docs/seclang/directives/secdefaultaction/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/seclang/directives/secdefaultaction/</guid><description>Every rule following a previous SecDefaultAction directive in the same configuration context will inherit its settings unless more specific actions are used.
Rulesets like OWASP Core Ruleset uses this to define operation modes:
You can set the default disruptive action to block for phases 1 and 2 and you can force a phase 3 rule to be disrupted if the thread score is high. You can set the default disruptive action to deny and each risky rule will interrupt the connection.</description></item></channel></rss>