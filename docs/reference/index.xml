<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Reference on</title><link>https://coraza.io/docs/reference/</link><description>Recent content in Reference on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://coraza.io/docs/reference/index.xml" rel="self" type="application/rss+xml"/><item><title>Internals</title><link>https://coraza.io/docs/reference/internals/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/reference/internals/</guid><description>WAF Engine # Waf is the main interface used to store settings, rules and create transactions, most directives will set variables for Waf instances. A coraza implementation might have unlimited Waf instances and each Waf might process unlimited transactions.
Transactions # Transactions are an instance of an url call for a Waf instance, transactions are created with wafinstance.NewTransaction(). Transactions hold collections and configurations that may be updated using rules.
Macro Expansion # Macro expansions are a function available for transactions, a macro expansion will compile a string and provide variables data to the current context.</description></item><item><title>Benchmarks</title><link>https://coraza.io/docs/reference/benchmarks/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/reference/benchmarks/</guid><description>Tests description # Tests are performed using OWASP Core Ruleset v4 and go benchmarks. The benchmark tool supports coraza v2, v3 and modsecurity. Modsecurity is executed using CGO. There are currently 4 test-cases and 7 variations: JSON request: 1kb and 100kb payload URLENCODED request: 1kb and 100kb payload Multipart file upload: 1kb and 100kb payload GET request: no body Results # Machine specs: Apple M1 Pro (10 cores, 16 GB RAM)</description></item><item><title>Body Processing</title><link>https://coraza.io/docs/reference/body-processing/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/reference/body-processing/</guid><description>BodyBuffer # BodyBuffer is used to effectively handle large bodies. Coraza has to buffer the body in order to make reliable blocking possible. Future versions might implement a more efficient solution.
BodyBuffer.Reader is a io.Reader that reads from either a memory buffer or a file. Using files is disabled for tinygo.
Important: Copying a Reader to BodyBuffer will most likely flush the original reader. In most cases you will have to keep two copies of the reader, one for coraza, and one for your application.</description></item><item><title>Extending</title><link>https://coraza.io/docs/reference/extending/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/reference/extending/</guid><description>Rule Operators: Create rule operators like @even to detect even numbers Rule Transformations: Create rule transformations like t:rot13 to encode your values in ROT13 Rule Actions: Create rule actions like challenge to redirect a malicious request to some bot detection system The plugin interface provides three functions to extend rule operators, transformations and actions. Each one of them must match it&amp;rsquo;s proper type or interface and be registered using the plugins package.</description></item></channel></rss>