<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Tutorials on</title><link>https://coraza.io/docs/tutorials/</link><description>Recent content in Tutorials on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 06 Oct 2020 08:48:45 +0000</lastBuildDate><atom:link href="https://coraza.io/docs/tutorials/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://coraza.io/docs/tutorials/introduction/</link><pubDate>Tue, 06 Oct 2020 08:48:57 +0000</pubDate><guid>https://coraza.io/docs/tutorials/introduction/</guid><description>Coraza Web Application Firewall v2 # Welcome to Coraza Web Application Firewall, this project is an enterprise grade, Golang port of ModSecurity, flexible and powerful enough to serve as the baseline for many projects. Prerequisites # Linux distribution (Debian and Centos are recommended, Windows is not supported yet) Golang compiler v1.16+ Migrate from v1 # Rollback SecAuditLog to the legacy syntax (serial/concurrent) Attach an error log handler using waf.SetErrorLogCb(cb) (optional) If you are using @detectXSS and @detectSQLi (CRS) install the plugin github.</description></item><item><title>Quick Start</title><link>https://coraza.io/docs/tutorials/quick-start/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://coraza.io/docs/tutorials/quick-start/</guid><description>If you are not looking to use Coraza WAF as a library and you want a working WAF implementation or integration, check the integrations page.
Requirements # Golang 1.17+ Add Coraza to your go project # go get github.com/corazawaf/coraza/v3@latest Create a WAF instance # WAF instances are the main container for settings and rules which are inherited by transactions that will process requests, responses and logging. A WAF instance can be created like this:</description></item><item><title>OWASP Core Ruleset</title><link>https://coraza.io/docs/tutorials/coreruleset/</link><pubDate>Tue, 13 Oct 2020 15:21:01 +0200</pubDate><guid>https://coraza.io/docs/tutorials/coreruleset/</guid><description>Important: OWASP Core Ruleset requires coraza-libinjection and coraza-pcre plugins to work. There is an upcoming fork that removes the need for the plugins by removing a few features and rewriting some @rx operators to RE2 instead of PCRE.
Installation # Core Ruleset can be normally installed by importing each required file in the following order:
wget https://raw.githubusercontent.com/jptosso/coraza-waf/v2/master/coraza.conf-recommended -O coraza.conf git clone https://github.com/coreruleset/coreruleset coraza.conf coreruleset/crs-setup.conf.example coreruleset/rules/*.conf For example:
func initCoraza(){ waf := coraza.</description></item><item><title>Using Plugins</title><link>https://coraza.io/docs/tutorials/using-plugins/</link><pubDate>Sun, 05 Sep 2021 14:03:58 -0300</pubDate><guid>https://coraza.io/docs/tutorials/using-plugins/</guid><description>Plugins must be included in your project&amp;rsquo;s main package, for example:
package main include( &amp;quot;github.com/coraza-waf/coraza/v2&amp;quot; _ &amp;quot;github.com/jptosso/coraza-libinjection&amp;quot; ) The previous code will automatically add the @detectXSS and @detectSQLi operators. (Please note this plugin requires libinjection)</description></item><item><title>Upgrave to v3 ðŸ†•</title><link>https://coraza.io/docs/tutorials/upgrade/</link><pubDate>Mon, 16 Nov 2020 13:59:39 +0100</pubDate><guid>https://coraza.io/docs/tutorials/upgrade/</guid><description>We made a big effort for v3 to keep the API similar to the previous version. But some minor changes are still needed for migrating to the new major release.
This tutorial details the steps requiring to upgrade your Coraza v2 application to Coraza v3.
Seclang parser # NewParser now panics instead of returning an error, and it doesn&amp;rsquo;t need the waf as parameter.
// old code: parser, err := seclang.</description></item></channel></rss>